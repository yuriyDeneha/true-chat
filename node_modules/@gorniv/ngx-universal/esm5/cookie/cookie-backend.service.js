/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
import { CookieService } from './cookie.service';
import { CookieOptionsProvider } from './cookie-options-provider';
var CookieBackendService = /** @class */ (function (_super) {
    tslib_1.__extends(CookieBackendService, _super);
    function CookieBackendService(request, response, _optionsProvider) {
        var _this = _super.call(this, _optionsProvider) || this;
        _this.request = request;
        _this.response = response;
        return _this;
    }
    Object.defineProperty(CookieBackendService.prototype, "cookieString", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.request.cookie || this.request.headers['cookie'] || '';
        },
        set: /**
         * @protected
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.request.cookie = val;
            this.response.cookie = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    CookieBackendService.prototype.put = /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    function (key, value, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var findKey = false;
        /** @type {?} */
        var newCookie = Object.keys(this.getAll())
            // tslint:disable-next-line: no-shadowed-variable
            .map((/**
         * @param {?} keyItem
         * @return {?}
         */
        function (keyItem) {
            if (keyItem === key) {
                findKey = true;
                return key + "=" + value;
            }
            return keyItem + "=" + _this.get(keyItem);
        }))
            .join('; ');
        if (!findKey) {
            newCookie += "; " + key + "=" + value + ";";
        }
        this.request.headers.cookie = newCookie;
        // not sure
        this.cookieString = newCookie;
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    CookieBackendService.prototype.remove = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        var _this = this;
        /** @type {?} */
        var newCookie = Object.keys(this.getAll())
            // tslint:disable-next-line: no-shadowed-variable
            .map((/**
         * @param {?} keyItem
         * @return {?}
         */
        function (keyItem) {
            if (keyItem === key) {
                return '';
            }
            return keyItem + "=" + _this.get(keyItem);
        }))
            .join('; ');
        this.request.headers.cookie = newCookie;
        // not sure
        this.cookieString = newCookie;
    };
    CookieBackendService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CookieBackendService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [REQUEST,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [RESPONSE,] }] },
        { type: CookieOptionsProvider }
    ]; };
    return CookieBackendService;
}(CookieService));
export { CookieBackendService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CookieBackendService.prototype.request;
    /**
     * @type {?}
     * @private
     */
    CookieBackendService.prototype.response;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhY2tlbmQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnb3JuaXYvbmd4LXVuaXZlcnNhbC8iLCJzb3VyY2VzIjpbImNvb2tpZS9jb29raWUtYmFja2VuZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUV2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFHbEU7SUFDMEMsZ0RBQWE7SUFDckQsOEJBQzJCLE9BQVksRUFDWCxRQUFhLEVBQ3ZDLGdCQUF1QztRQUh6QyxZQUtFLGtCQUFNLGdCQUFnQixDQUFDLFNBQ3hCO1FBTDBCLGFBQU8sR0FBUCxPQUFPLENBQUs7UUFDWCxjQUFRLEdBQVIsUUFBUSxDQUFLOztJQUl6QyxDQUFDO0lBRUQsc0JBQWMsOENBQVk7Ozs7O1FBQTFCO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckUsQ0FBQzs7Ozs7O1FBRUQsVUFBMkIsR0FBVztZQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQzdCLENBQUM7OztPQUxBOzs7Ozs7O0lBT0Qsa0NBQUc7Ozs7OztJQUFILFVBQUksR0FBVyxFQUFFLEtBQWEsRUFBRSxPQUEyQjtRQUEzRCxpQkFrQkM7UUFsQitCLHdCQUFBLEVBQUEsWUFBMkI7O1lBQ3JELE9BQU8sR0FBRyxLQUFLOztZQUNmLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN4QyxpREFBaUQ7YUFDaEQsR0FBRzs7OztRQUFDLFVBQUMsT0FBTztZQUNYLElBQUksT0FBTyxLQUFLLEdBQUcsRUFBRTtnQkFDbkIsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDZixPQUFVLEdBQUcsU0FBSSxLQUFPLENBQUM7YUFDMUI7WUFDRCxPQUFVLE9BQU8sU0FBSSxLQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRyxDQUFDO1FBQzNDLENBQUMsRUFBQzthQUNELElBQUksQ0FBQyxJQUFJLENBQUM7UUFDYixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osU0FBUyxJQUFJLE9BQUssR0FBRyxTQUFJLEtBQUssTUFBRyxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztRQUN4QyxXQUFXO1FBQ1gsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7SUFDaEMsQ0FBQzs7Ozs7O0lBRUQscUNBQU07Ozs7O0lBQU4sVUFBTyxHQUFXLEVBQUUsT0FBdUI7UUFBM0MsaUJBYUM7O1lBWk8sU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzFDLGlEQUFpRDthQUNoRCxHQUFHOzs7O1FBQUMsVUFBQyxPQUFPO1lBQ1gsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFO2dCQUNuQixPQUFPLEVBQUUsQ0FBQzthQUNYO1lBQ0QsT0FBVSxPQUFPLFNBQUksS0FBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUcsQ0FBQztRQUMzQyxDQUFDLEVBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztRQUN4QyxXQUFXO1FBQ1gsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7SUFDaEMsQ0FBQzs7Z0JBcERGLFVBQVU7Ozs7Z0RBR04sTUFBTSxTQUFDLE9BQU87Z0RBQ2QsTUFBTSxTQUFDLFFBQVE7Z0JBUFgscUJBQXFCOztJQXdEOUIsMkJBQUM7Q0FBQSxBQXJERCxDQUMwQyxhQUFhLEdBb0R0RDtTQXBEWSxvQkFBb0I7Ozs7OztJQUU3Qix1Q0FBcUM7Ozs7O0lBQ3JDLHdDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUkVRVUVTVCwgUkVTUE9OU0UgfSBmcm9tICdAbmd1bml2ZXJzYWwvZXhwcmVzcy1lbmdpbmUvdG9rZW5zJztcblxuaW1wb3J0IHsgQ29va2llU2VydmljZSB9IGZyb20gJy4vY29va2llLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29va2llT3B0aW9uc1Byb3ZpZGVyIH0gZnJvbSAnLi9jb29raWUtb3B0aW9ucy1wcm92aWRlcic7XG5pbXBvcnQgeyBDb29raWVPcHRpb25zIH0gZnJvbSAnLi9jb29raWUtb3B0aW9ucy5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb29raWVCYWNrZW5kU2VydmljZSBleHRlbmRzIENvb2tpZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFJFUVVFU1QpIHByaXZhdGUgcmVxdWVzdDogYW55LFxuICAgIEBJbmplY3QoUkVTUE9OU0UpIHByaXZhdGUgcmVzcG9uc2U6IGFueSxcbiAgICBfb3B0aW9uc1Byb3ZpZGVyOiBDb29raWVPcHRpb25zUHJvdmlkZXIsXG4gICkge1xuICAgIHN1cGVyKF9vcHRpb25zUHJvdmlkZXIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldCBjb29raWVTdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmNvb2tpZSB8fCB0aGlzLnJlcXVlc3QuaGVhZGVyc1snY29va2llJ10gfHwgJyc7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0IGNvb2tpZVN0cmluZyh2YWw6IHN0cmluZykge1xuICAgIHRoaXMucmVxdWVzdC5jb29raWUgPSB2YWw7XG4gICAgdGhpcy5yZXNwb25zZS5jb29raWUgPSB2YWw7XG4gIH1cblxuICBwdXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIG9wdGlvbnM6IENvb2tpZU9wdGlvbnMgPSB7fSk6IHZvaWQge1xuICAgIGxldCBmaW5kS2V5ID0gZmFsc2U7XG4gICAgbGV0IG5ld0Nvb2tpZSA9IE9iamVjdC5rZXlzKHRoaXMuZ2V0QWxsKCkpXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXNoYWRvd2VkLXZhcmlhYmxlXG4gICAgICAubWFwKChrZXlJdGVtKSA9PiB7XG4gICAgICAgIGlmIChrZXlJdGVtID09PSBrZXkpIHtcbiAgICAgICAgICBmaW5kS2V5ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gYCR7a2V5fT0ke3ZhbHVlfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke2tleUl0ZW19PSR7dGhpcy5nZXQoa2V5SXRlbSl9YDtcbiAgICAgIH0pXG4gICAgICAuam9pbignOyAnKTtcbiAgICBpZiAoIWZpbmRLZXkpIHtcbiAgICAgIG5ld0Nvb2tpZSArPSBgOyAke2tleX09JHt2YWx1ZX07YDtcbiAgICB9XG4gICAgdGhpcy5yZXF1ZXN0LmhlYWRlcnMuY29va2llID0gbmV3Q29va2llO1xuICAgIC8vIG5vdCBzdXJlXG4gICAgdGhpcy5jb29raWVTdHJpbmcgPSBuZXdDb29raWU7XG4gIH1cblxuICByZW1vdmUoa2V5OiBzdHJpbmcsIG9wdGlvbnM/OiBDb29raWVPcHRpb25zKTogdm9pZCB7XG4gICAgY29uc3QgbmV3Q29va2llID0gT2JqZWN0LmtleXModGhpcy5nZXRBbGwoKSlcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc2hhZG93ZWQtdmFyaWFibGVcbiAgICAgIC5tYXAoKGtleUl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGtleUl0ZW0gPT09IGtleSkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7a2V5SXRlbX09JHt0aGlzLmdldChrZXlJdGVtKX1gO1xuICAgICAgfSlcbiAgICAgIC5qb2luKCc7ICcpO1xuICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzLmNvb2tpZSA9IG5ld0Nvb2tpZTtcbiAgICAvLyBub3Qgc3VyZVxuICAgIHRoaXMuY29va2llU3RyaW5nID0gbmV3Q29va2llO1xuICB9XG59XG4iXX0=