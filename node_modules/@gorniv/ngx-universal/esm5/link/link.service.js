/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// https://github.com/angular/angular/issues/15776#issuecomment-291862953
import { Injectable, RendererFactory2, ViewEncapsulation, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/platform-browser';
var LinkService = /** @class */ (function () {
    function LinkService(rendererFactory, document) {
        this.rendererFactory = rendererFactory;
        this.document = document;
    }
    /**
     * Inject the State into the bottom of the <head>
     */
    /**
     * Inject the State into the bottom of the <head>
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */
    LinkService.prototype.addTag = /**
     * Inject the State into the bottom of the <head>
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */
    function (tag, forceCreation) {
        try {
            /** @type {?} */
            var renderer_1 = this.rendererFactory.createRenderer(this.document, {
                id: '-1',
                encapsulation: ViewEncapsulation.None,
                styles: [],
                data: {}
            });
            /** @type {?} */
            var link_1 = renderer_1.createElement('link');
            /** @type {?} */
            var head = this.document.head;
            /** @type {?} */
            var selector = this._parseSelector(tag);
            if (head === null) {
                throw new Error('<head> not found within DOCUMENT.');
            }
            Object.keys(tag).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            function (prop) {
                return renderer_1.setAttribute(link_1, prop, tag[prop]);
            }));
            // [TODO]: get them to update the existing one (if it exists) ?
            renderer_1.appendChild(head, link_1);
        }
        catch (e) {
            console.error('Error within linkService : ', e);
        }
    };
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    LinkService.prototype._parseSelector = /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        // Possibly re-work this
        /** @type {?} */
        var attr = tag.rel ? 'rel' : 'hreflang';
        return attr + "=\"" + tag[attr] + "\"";
    };
    LinkService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
        { type: Injectable }
    ];
    /** @nocollapse */
    LinkService.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    return LinkService;
}());
export { LinkService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LinkService.prototype.rendererFactory;
    /**
     * @type {?}
     * @private
     */
    LinkService.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdvcm5pdi9uZ3gtdW5pdmVyc2FsLyIsInNvdXJjZXMiOlsibGluay9saW5rLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFZLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFckQ7SUFjSSxxQkFDWSxlQUFpQyxFQUNmLFFBQVE7UUFEMUIsb0JBQWUsR0FBZixlQUFlLENBQWtCO1FBQ2YsYUFBUSxHQUFSLFFBQVEsQ0FBQTtJQUV0QyxDQUFDO0lBRUQ7O09BRUc7Ozs7Ozs7SUFDSCw0QkFBTTs7Ozs7O0lBQU4sVUFBTyxHQUFtQixFQUFFLGFBQXVCO1FBRS9DLElBQUk7O2dCQUNNLFVBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNoRSxFQUFFLEVBQUUsSUFBSTtnQkFDUixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLEVBQUU7YUFDWCxDQUFDOztnQkFFSSxNQUFJLEdBQUcsVUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7O2dCQUNyQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJOztnQkFDekIsUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDO1lBRXpDLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtnQkFDZixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7YUFDeEQ7WUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFDLElBQVk7Z0JBQ2xDLE9BQU8sVUFBUSxDQUFDLFlBQVksQ0FBQyxNQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3hELENBQUMsRUFBQyxDQUFDO1lBRUgsK0RBQStEO1lBQy9ELFVBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLE1BQUksQ0FBQyxDQUFDO1NBRXBDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLENBQUMsS0FBSyxDQUFDLDZCQUE2QixFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ25EO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sb0NBQWM7Ozs7O0lBQXRCLFVBQXVCLEdBQW1COzs7WUFFaEMsSUFBSSxHQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVTtRQUNqRCxPQUFVLElBQUksV0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQUcsQ0FBQztJQUNwQyxDQUFDOztnQkF6REosVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjtnQkFTQSxVQUFVOzs7O2dCQWRvQixnQkFBZ0I7Z0RBbUJ0QyxNQUFNLFNBQUMsUUFBUTs7SUEwQ3hCLGtCQUFDO0NBQUEsQUExREQsSUEwREM7U0E5Q1ksV0FBVzs7Ozs7O0lBR2hCLHNDQUF5Qzs7Ozs7SUFDekMsK0JBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTU3NzYjaXNzdWVjb21tZW50LTI5MTg2Mjk1M1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgUmVuZGVyZXJGYWN0b3J5MiwgVmlld0VuY2Fwc3VsYXRpb24sIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG4vKiBcbiAqIC0tIExpbmtTZXJ2aWNlIC0tICAgICAgICBbVGVtcG9yYXJ5XVxuICogQE1hcmtQaWVzemFrXG4gKiBcbiAqIFNpbWlsYXIgdG8gTWV0YSBzZXJ2aWNlIGJ1dCBtYWRlIHRvIGhhbmRsZSA8bGluaz4gY3JlYXRpb24gZm9yIFNFTyBwdXJwb3Nlc1xuICogLS0gTk9URTogU29vbiB0aGVyZSB3aWxsIGJlIGFuIG92ZXJhbGwgRG9jdW1lbnRTZXJ2aWNlIHdpdGhpbiBBbmd1bGFyIHRoYXQgaGFuZGxlcyBNZXRhL0xpbmsgZXZlcnl0aGluZ1xuICovXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMaW5rU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZW5kZXJlckZhY3Rvcnk6IFJlbmRlcmVyRmFjdG9yeTIsXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnRcbiAgICApIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbmplY3QgdGhlIFN0YXRlIGludG8gdGhlIGJvdHRvbSBvZiB0aGUgPGhlYWQ+XG4gICAgICovXG4gICAgYWRkVGFnKHRhZzogTGlua0RlZmluaXRpb24sIGZvcmNlQ3JlYXRpb24/OiBib29sZWFuKSB7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIodGhpcy5kb2N1bWVudCwge1xuICAgICAgICAgICAgICAgIGlkOiAnLTEnLFxuICAgICAgICAgICAgICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBbXSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7fVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSByZW5kZXJlci5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgICAgICAgICBjb25zdCBoZWFkID0gdGhpcy5kb2N1bWVudC5oZWFkO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSB0aGlzLl9wYXJzZVNlbGVjdG9yKHRhZyk7XG5cbiAgICAgICAgICAgIGlmIChoZWFkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCc8aGVhZD4gbm90IGZvdW5kIHdpdGhpbiBET0NVTUVOVC4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmtleXModGFnKS5mb3JFYWNoKChwcm9wOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyZXIuc2V0QXR0cmlidXRlKGxpbmssIHByb3AsIHRhZ1twcm9wXSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gW1RPRE9dOiBnZXQgdGhlbSB0byB1cGRhdGUgdGhlIGV4aXN0aW5nIG9uZSAoaWYgaXQgZXhpc3RzKSA/XG4gICAgICAgICAgICByZW5kZXJlci5hcHBlbmRDaGlsZChoZWFkLCBsaW5rKTtcblxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB3aXRoaW4gbGlua1NlcnZpY2UgOiAnLCBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3BhcnNlU2VsZWN0b3IodGFnOiBMaW5rRGVmaW5pdGlvbik6IHN0cmluZyB7XG4gICAgICAgIC8vIFBvc3NpYmx5IHJlLXdvcmsgdGhpc1xuICAgICAgICBjb25zdCBhdHRyOiBzdHJpbmcgPSB0YWcucmVsID8gJ3JlbCcgOiAnaHJlZmxhbmcnO1xuICAgICAgICByZXR1cm4gYCR7YXR0cn09XCIke3RhZ1thdHRyXX1cImA7XG4gICAgfVxufVxuXG5leHBvcnQgZGVjbGFyZSB0eXBlIExpbmtEZWZpbml0aW9uID0ge1xuICAgIGNoYXJzZXQ/OiBzdHJpbmc7XG4gICAgY3Jvc3NvcmlnaW4/OiBzdHJpbmc7XG4gICAgaHJlZj86IHN0cmluZztcbiAgICBocmVmbGFuZz86IHN0cmluZztcbiAgICBtZWRpYT86IHN0cmluZztcbiAgICByZWw/OiBzdHJpbmc7XG4gICAgcmV2Pzogc3RyaW5nO1xuICAgIHNpemVzPzogc3RyaW5nO1xuICAgIHRhcmdldD86IHN0cmluZztcbiAgICB0eXBlPzogc3RyaW5nO1xufSAmIHtcbiAgICAgICAgW3Byb3A6IHN0cmluZ106IHN0cmluZztcbiAgICB9OyJdfQ==