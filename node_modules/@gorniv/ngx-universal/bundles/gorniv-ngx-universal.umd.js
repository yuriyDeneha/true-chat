(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@angular/platform-browser'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@nguniversal/express-engine/tokens')) :
    typeof define === 'function' && define.amd ? define('@gorniv/ngx-universal', ['exports', '@angular/core', '@angular/common/http', '@angular/platform-browser', 'rxjs', 'rxjs/operators', '@angular/common', '@nguniversal/express-engine/tokens'], factory) :
    (global = global || self, factory((global.gorniv = global.gorniv || {}, global.gorniv['ngx-universal'] = {}), global.ng.core, global.ng.common.http, global.ng.platformBrowser, global.rxjs, global.rxjs.operators, global.ng.common, global.tokens));
}(this, function (exports, core, http, platformBrowser, rxjs, operators, common, tokens) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TransferHttpService = /** @class */ (function () {
        function TransferHttpService(transferState, httpClient, platformId) {
            this.transferState = transferState;
            this.httpClient = httpClient;
            this.platformId = platformId;
        }
        /**
         * @template T
         * @param {?} method
         * @param {?} uri
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.request = /**
         * @template T
         * @param {?} method
         * @param {?} uri
         * @param {?=} options
         * @return {?}
         */
        function (method, uri, options) {
            var _this = this;
            // tslint:disable-next-line:no-shadowed-variable
            return this.getData(method, uri, options, (/**
             * @param {?} method
             * @param {?} url
             * @param {?} options
             * @return {?}
             */
            function (method, url, options) {
                return _this.httpClient.request(method, url, options);
            }));
        };
        /**
         * Performs a request with `get` http method.
         */
        /**
         * Performs a request with `get` http method.
         * @template T
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.get = /**
         * Performs a request with `get` http method.
         * @template T
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        function (url, options) {
            var _this = this;
            // tslint:disable-next-line:no-shadowed-variable
            return this.getData('get', url, options, (/**
             * @param {?} _method
             * @param {?} url
             * @param {?} options
             * @return {?}
             */
            function (_method, url, options) {
                return _this.httpClient.get(url, options);
            }));
        };
        /**
         * Performs a request with `post` http method.
         */
        /**
         * Performs a request with `post` http method.
         * @template T
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.post = /**
         * Performs a request with `post` http method.
         * @template T
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        function (url, body, options) {
            var _this = this;
            // tslint:disable-next-line:no-shadowed-variable
            return this.getPostData('post', url, body, options, (
            // tslint:disable-next-line:no-shadowed-variable
            // tslint:disable-next-line:no-shadowed-variable
            /**
             * @param {?} _method
             * @param {?} url
             * @param {?} body
             * @param {?} options
             * @return {?}
             */
            function (_method, url, body, options) {
                return _this.httpClient.post(url, body, options);
            }));
        };
        /**
         * Performs a request with `put` http method.
         */
        /**
         * Performs a request with `put` http method.
         * @template T
         * @param {?} url
         * @param {?} _body
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.put = /**
         * Performs a request with `put` http method.
         * @template T
         * @param {?} url
         * @param {?} _body
         * @param {?=} options
         * @return {?}
         */
        function (url, _body, options) {
            var _this = this;
            // tslint:disable-next-line:no-shadowed-variable
            return this.getPostData('put', url, _body, options, (/**
             * @param {?} _method
             * @param {?} url
             * @param {?} _body
             * @param {?} options
             * @return {?}
             */
            function (_method, url, _body, options) {
                return _this.httpClient.put(url, _body, options);
            }));
        };
        /**
         * Performs a request with `delete` http method.
         */
        /**
         * Performs a request with `delete` http method.
         * @template T
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.delete = /**
         * Performs a request with `delete` http method.
         * @template T
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        function (url, options) {
            var _this = this;
            // tslint:disable-next-line:no-shadowed-variable
            return this.getData('delete', url, options, (/**
             * @param {?} _method
             * @param {?} url
             * @param {?} options
             * @return {?}
             */
            function (_method, url, options) {
                return _this.httpClient.delete(url, options);
            }));
        };
        /**
         * Performs a request with `patch` http method.
         */
        /**
         * Performs a request with `patch` http method.
         * @template T
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.patch = /**
         * Performs a request with `patch` http method.
         * @template T
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        function (url, body, options) {
            var _this = this;
            // tslint:disable-next-line:no-shadowed-variable
            return this.getPostData('patch', url, body, options, (
            // tslint:disable-next-line:no-shadowed-variable
            // tslint:disable-next-line:no-shadowed-variable
            /**
             * @param {?} _method
             * @param {?} url
             * @param {?} body
             * @param {?} options
             * @return {?}
             */
            function (_method, url, body, options) {
                return _this.httpClient.patch(url, body, options);
            }));
        };
        /**
         * Performs a request with `head` http method.
         */
        /**
         * Performs a request with `head` http method.
         * @template T
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.head = /**
         * Performs a request with `head` http method.
         * @template T
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        function (url, options) {
            var _this = this;
            // tslint:disable-next-line:no-shadowed-variable
            return this.getData('head', url, options, (/**
             * @param {?} _method
             * @param {?} url
             * @param {?} options
             * @return {?}
             */
            function (_method, url, options) {
                return _this.httpClient.head(url, options);
            }));
        };
        /**
         * Performs a request with `options` http method.
         */
        /**
         * Performs a request with `options` http method.
         * @template T
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        TransferHttpService.prototype.options = /**
         * Performs a request with `options` http method.
         * @template T
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        function (url, options) {
            var _this = this;
            // tslint:disable-next-line:no-shadowed-variable
            return this.getData('options', url, options, (
            // tslint:disable-next-line:no-shadowed-variable
            // tslint:disable-next-line:no-shadowed-variable
            /**
             * @param {?} _method
             * @param {?} url
             * @param {?} options
             * @return {?}
             */
            function (_method, url, options) {
                return _this.httpClient.options(url, options);
            }));
        };
        // tslint:disable-next-line:max-line-length
        // tslint:disable-next-line:max-line-length
        /**
         * @private
         * @template T
         * @param {?} method
         * @param {?} uri
         * @param {?} options
         * @param {?} callback
         * @return {?}
         */
        TransferHttpService.prototype.getData = 
        // tslint:disable-next-line:max-line-length
        /**
         * @private
         * @template T
         * @param {?} method
         * @param {?} uri
         * @param {?} options
         * @param {?} callback
         * @return {?}
         */
        function (method, uri, options, callback) {
            var _this = this;
            /** @type {?} */
            var url = uri;
            if (typeof uri !== 'string') {
                url = uri.url;
            }
            /** @type {?} */
            var tempKey = url + (options ? JSON.stringify(options) : '');
            /** @type {?} */
            var key = platformBrowser.makeStateKey(tempKey);
            try {
                return this.resolveData(key);
            }
            catch (e) {
                return callback(method, uri, options).pipe(operators.tap((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    if (common.isPlatformBrowser(_this.platformId)) ;
                    if (common.isPlatformServer(_this.platformId)) {
                        _this.setCache(key, data);
                    }
                })));
            }
        };
        /**
         * @private
         * @template T
         * @param {?} _method
         * @param {?} uri
         * @param {?} body
         * @param {?} options
         * @param {?} callback
         * @return {?}
         */
        TransferHttpService.prototype.getPostData = /**
         * @private
         * @template T
         * @param {?} _method
         * @param {?} uri
         * @param {?} body
         * @param {?} options
         * @param {?} callback
         * @return {?}
         */
        function (_method, uri, body, options, callback) {
            var _this = this;
            /** @type {?} */
            var url = uri;
            if (typeof uri !== 'string') {
                url = uri.url;
            }
            /** @type {?} */
            var tempKey = url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');
            /** @type {?} */
            var key = platformBrowser.makeStateKey(tempKey);
            try {
                return this.resolveData(key);
            }
            catch (e) {
                return callback(_method, uri, body, options).pipe(operators.tap((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    if (common.isPlatformBrowser(_this.platformId)) ;
                    if (common.isPlatformServer(_this.platformId)) {
                        _this.setCache(key, data);
                    }
                })));
            }
        };
        /**
         * @private
         * @template T
         * @param {?} key
         * @return {?}
         */
        TransferHttpService.prototype.resolveData = /**
         * @private
         * @template T
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var data = this.getFromCache(key);
            if (!data) {
                throw new Error();
            }
            if (common.isPlatformBrowser(this.platformId)) {
                // Client only code.
                this.transferState.remove(key);
            }
            if (common.isPlatformServer(this.platformId)) ;
            return rxjs.from(Promise.resolve(data));
        };
        /**
         * @private
         * @template T
         * @param {?} key
         * @param {?} data
         * @return {?}
         */
        TransferHttpService.prototype.setCache = /**
         * @private
         * @template T
         * @param {?} key
         * @param {?} data
         * @return {?}
         */
        function (key, data) {
            return this.transferState.set(key, data);
        };
        /**
         * @private
         * @template T
         * @param {?} key
         * @return {?}
         */
        TransferHttpService.prototype.getFromCache = /**
         * @private
         * @template T
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return this.transferState.get(key, null);
        };
        TransferHttpService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TransferHttpService.ctorParameters = function () { return [
            { type: platformBrowser.TransferState },
            { type: http.HttpClient },
            { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        return TransferHttpService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TransferHttpModule = /** @class */ (function () {
        function TransferHttpModule() {
        }
        TransferHttpModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [TransferHttpService],
                    },] }
        ];
        return TransferHttpModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} obj
     * @return {?}
     */
    function isBlank(obj) {
        return obj === undefined || obj === null;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isPresent(obj) {
        return obj !== undefined && obj !== null;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isString(obj) {
        return typeof obj === 'string';
    }
    /**
     * @param {?} oldOptions
     * @param {?=} newOptions
     * @return {?}
     */
    function mergeOptions(oldOptions, newOptions) {
        if (!newOptions) {
            return oldOptions;
        }
        return {
            path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,
            domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,
            expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,
            secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,
            httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,
            storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded,
        };
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function safeDecodeURIComponent(str) {
        try {
            return decodeURIComponent(str);
        }
        catch (e) {
            return str;
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function safeJsonParse(str) {
        try {
            return JSON.parse(str);
        }
        catch (e) {
            return str;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var COOKIE_OPTIONS = new core.InjectionToken('COOKIE_OPTIONS');
    var CookieOptionsProvider = /** @class */ (function () {
        function CookieOptionsProvider(options, _injector) {
            if (options === void 0) { options = {}; }
            this._injector = _injector;
            this.defaultOptions = {
                path: this._injector.get(common.APP_BASE_HREF, '/'),
                domain: null,
                expires: null,
                secure: false,
                httpOnly: false
            };
            this._options = mergeOptions(this.defaultOptions, options);
        }
        Object.defineProperty(CookieOptionsProvider.prototype, "options", {
            get: /**
             * @return {?}
             */
            function () {
                return this._options;
            },
            enumerable: true,
            configurable: true
        });
        CookieOptionsProvider.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CookieOptionsProvider.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [COOKIE_OPTIONS,] }] },
            { type: core.Injector }
        ]; };
        return CookieOptionsProvider;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CookieService = /** @class */ (function () {
        function CookieService(_optionsProvider) {
            this._optionsProvider = _optionsProvider;
            this.options = this._optionsProvider.options;
        }
        Object.defineProperty(CookieService.prototype, "cookieString", {
            get: /**
             * @protected
             * @return {?}
             */
            function () {
                return document.cookie || '';
            },
            set: /**
             * @protected
             * @param {?} val
             * @return {?}
             */
            function (val) {
                document.cookie = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @name CookieService#get
         *
         * @description
         * Returns the value of given cookie key.
         *
         * @param key Id to use for lookup.
         * @returns Raw cookie value.
         */
        /**
         * \@name CookieService#get
         *
         * \@description
         * Returns the value of given cookie key.
         *
         * @param {?} key Id to use for lookup.
         * @return {?} Raw cookie value.
         */
        CookieService.prototype.get = /**
         * \@name CookieService#get
         *
         * \@description
         * Returns the value of given cookie key.
         *
         * @param {?} key Id to use for lookup.
         * @return {?} Raw cookie value.
         */
        function (key) {
            return ((/** @type {?} */ (this._cookieReader())))[key];
        };
        /**
         * @name CookieService#getObject
         *
         * @description
         * Returns the deserialized value of given cookie key.
         *
         * @param key Id to use for lookup.
         * @returns Deserialized cookie value.
         */
        /**
         * \@name CookieService#getObject
         *
         * \@description
         * Returns the deserialized value of given cookie key.
         *
         * @param {?} key Id to use for lookup.
         * @return {?} Deserialized cookie value.
         */
        CookieService.prototype.getObject = /**
         * \@name CookieService#getObject
         *
         * \@description
         * Returns the deserialized value of given cookie key.
         *
         * @param {?} key Id to use for lookup.
         * @return {?} Deserialized cookie value.
         */
        function (key) {
            /** @type {?} */
            var value = this.get(key);
            return value ? safeJsonParse(value) : value;
        };
        /**
         * @name CookieService#getAll
         *
         * @description
         * Returns a key value object with all the cookies.
         *
         * @returns All cookies
         */
        /**
         * \@name CookieService#getAll
         *
         * \@description
         * Returns a key value object with all the cookies.
         *
         * @return {?} All cookies
         */
        CookieService.prototype.getAll = /**
         * \@name CookieService#getAll
         *
         * \@description
         * Returns a key value object with all the cookies.
         *
         * @return {?} All cookies
         */
        function () {
            return (/** @type {?} */ (this._cookieReader()));
        };
        /**
         * @name CookieService#put
         *
         * @description
         * Sets a value for given cookie key.
         *
         * @param key Id for the `value`.
         * @param value Raw value to be stored.
         * @param options (Optional) Options object.
         */
        /**
         * \@name CookieService#put
         *
         * \@description
         * Sets a value for given cookie key.
         *
         * @param {?} key Id for the `value`.
         * @param {?} value Raw value to be stored.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
        CookieService.prototype.put = /**
         * \@name CookieService#put
         *
         * \@description
         * Sets a value for given cookie key.
         *
         * @param {?} key Id for the `value`.
         * @param {?} value Raw value to be stored.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
        function (key, value, options) {
            this._cookieWriter()(key, value, options);
        };
        /**
         * @name CookieService#putObject
         *
         * @description
         * Serializes and sets a value for given cookie key.
         *
         * @param key Id for the `value`.
         * @param value Value to be stored.
         * @param options (Optional) Options object.
         */
        /**
         * \@name CookieService#putObject
         *
         * \@description
         * Serializes and sets a value for given cookie key.
         *
         * @param {?} key Id for the `value`.
         * @param {?} value Value to be stored.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
        CookieService.prototype.putObject = /**
         * \@name CookieService#putObject
         *
         * \@description
         * Serializes and sets a value for given cookie key.
         *
         * @param {?} key Id for the `value`.
         * @param {?} value Value to be stored.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
        function (key, value, options) {
            this.put(key, JSON.stringify(value), options);
        };
        /**
         * @name CookieService#remove
         *
         * @description
         * Remove given cookie.
         *
         * @param key Id of the key-value pair to delete.
         * @param options (Optional) Options object.
         */
        /**
         * \@name CookieService#remove
         *
         * \@description
         * Remove given cookie.
         *
         * @param {?} key Id of the key-value pair to delete.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
        CookieService.prototype.remove = /**
         * \@name CookieService#remove
         *
         * \@description
         * Remove given cookie.
         *
         * @param {?} key Id of the key-value pair to delete.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
        function (key, options) {
            this._cookieWriter()(key, undefined, options);
        };
        /**
         * @name CookieService#removeAll
         *
         * @description
         * Remove all cookies.
         */
        /**
         * \@name CookieService#removeAll
         *
         * \@description
         * Remove all cookies.
         * @param {?=} options
         * @return {?}
         */
        CookieService.prototype.removeAll = /**
         * \@name CookieService#removeAll
         *
         * \@description
         * Remove all cookies.
         * @param {?=} options
         * @return {?}
         */
        function (options) {
            var _this = this;
            /** @type {?} */
            var cookies = this.getAll();
            Object.keys(cookies).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                _this.remove(key, options);
            }));
        };
        /**
         * @private
         * @return {?}
         */
        CookieService.prototype._cookieReader = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var lastCookies = {};
            /** @type {?} */
            var lastCookieString = '';
            /** @type {?} */
            var cookieArray;
            /** @type {?} */
            var cookie;
            /** @type {?} */
            var i;
            /** @type {?} */
            var index;
            /** @type {?} */
            var name;
            /** @type {?} */
            var currentCookieString = this.cookieString;
            if (currentCookieString !== lastCookieString) {
                lastCookieString = currentCookieString;
                cookieArray = lastCookieString.split('; ');
                lastCookies = {};
                for (i = 0; i < cookieArray.length; i++) {
                    cookie = cookieArray[i];
                    index = cookie.indexOf('=');
                    if (index > 0) { // ignore nameless cookies
                        name = safeDecodeURIComponent(cookie.substring(0, index));
                        // the first value that is seen for a cookie is the most
                        // specific one.  values for the same cookie name that
                        // follow are for less specific paths.
                        if (isBlank(((/** @type {?} */ (lastCookies)))[name])) {
                            ((/** @type {?} */ (lastCookies)))[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                        }
                    }
                }
            }
            return lastCookies;
        };
        /**
         * @private
         * @return {?}
         */
        CookieService.prototype._cookieWriter = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var that = this;
            return (/**
             * @param {?} name
             * @param {?} value
             * @param {?=} options
             * @return {?}
             */
            function (name, value, options) {
                that.cookieString = that._buildCookieString(name, value, options);
            });
        };
        /**
         * @private
         * @param {?} name
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        CookieService.prototype._buildCookieString = /**
         * @private
         * @param {?} name
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        function (name, value, options) {
            /** @type {?} */
            var opts = mergeOptions(this.options, options);
            /** @type {?} */
            var expires = opts.expires;
            if (isBlank(value)) {
                expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
                value = '';
            }
            if (isString(expires)) {
                expires = new Date(expires);
            }
            /** @type {?} */
            var cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);
            /** @type {?} */
            var str = encodeURIComponent(name) + '=' + cookieValue;
            str += opts.path ? ';path=' + opts.path : '';
            str += opts.domain ? ';domain=' + opts.domain : '';
            str += expires ? ';expires=' + expires.toUTCString() : '';
            str += opts.secure ? ';secure' : '';
            str += opts.httpOnly ? '; HttpOnly' : '';
            // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
            // - 300 cookies
            // - 20 cookies per unique domain
            // - 4096 bytes per cookie
            /** @type {?} */
            var cookieLength = str.length + 1;
            if (cookieLength > 4096) {
                console.log("Cookie '" + name + "' possibly not set or overflowed because it was too large (" + cookieLength + " > 4096 bytes)!");
            }
            return str;
        };
        CookieService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CookieService.ctorParameters = function () { return [
            { type: CookieOptionsProvider }
        ]; };
        return CookieService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CookieBackendService = /** @class */ (function (_super) {
        __extends(CookieBackendService, _super);
        function CookieBackendService(request, response, _optionsProvider) {
            var _this = _super.call(this, _optionsProvider) || this;
            _this.request = request;
            _this.response = response;
            return _this;
        }
        Object.defineProperty(CookieBackendService.prototype, "cookieString", {
            get: /**
             * @protected
             * @return {?}
             */
            function () {
                return this.request.cookie || this.request.headers['cookie'] || '';
            },
            set: /**
             * @protected
             * @param {?} val
             * @return {?}
             */
            function (val) {
                this.request.cookie = val;
                this.response.cookie = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} key
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        CookieBackendService.prototype.put = /**
         * @param {?} key
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        function (key, value, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            /** @type {?} */
            var findKey = false;
            /** @type {?} */
            var newCookie = Object.keys(this.getAll())
                // tslint:disable-next-line: no-shadowed-variable
                .map((/**
             * @param {?} keyItem
             * @return {?}
             */
            function (keyItem) {
                if (keyItem === key) {
                    findKey = true;
                    return key + "=" + value;
                }
                return keyItem + "=" + _this.get(keyItem);
            }))
                .join('; ');
            if (!findKey) {
                newCookie += "; " + key + "=" + value + ";";
            }
            this.request.headers.cookie = newCookie;
            // not sure
            this.cookieString = newCookie;
        };
        /**
         * @param {?} key
         * @param {?=} options
         * @return {?}
         */
        CookieBackendService.prototype.remove = /**
         * @param {?} key
         * @param {?=} options
         * @return {?}
         */
        function (key, options) {
            var _this = this;
            /** @type {?} */
            var newCookie = Object.keys(this.getAll())
                // tslint:disable-next-line: no-shadowed-variable
                .map((/**
             * @param {?} keyItem
             * @return {?}
             */
            function (keyItem) {
                if (keyItem === key) {
                    return '';
                }
                return keyItem + "=" + _this.get(keyItem);
            }))
                .join('; ');
            this.request.headers.cookie = newCookie;
            // not sure
            this.cookieString = newCookie;
        };
        CookieBackendService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CookieBackendService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [tokens.REQUEST,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [tokens.RESPONSE,] }] },
            { type: CookieOptionsProvider }
        ]; };
        return CookieBackendService;
    }(CookieService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} cookieOptionsProvider
     * @return {?}
     */
    function cookieServiceFactory(cookieOptionsProvider) {
        return new CookieService(cookieOptionsProvider);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CookieModule = /** @class */ (function () {
        function CookieModule() {
        }
        /**
         * Use this method in your root module to provide the CookieService
         */
        /**
         * Use this method in your root module to provide the CookieService
         * @param {?=} options
         * @return {?}
         */
        CookieModule.forRoot = /**
         * Use this method in your root module to provide the CookieService
         * @param {?=} options
         * @return {?}
         */
        function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: CookieModule,
                providers: [
                    { provide: COOKIE_OPTIONS, useValue: options },
                    { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }
                ]
            };
        };
        /**
         * Use this method in your other (non root) modules to import the directive/pipe
         */
        /**
         * Use this method in your other (non root) modules to import the directive/pipe
         * @param {?=} options
         * @return {?}
         */
        CookieModule.forChild = /**
         * Use this method in your other (non root) modules to import the directive/pipe
         * @param {?=} options
         * @return {?}
         */
        function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: CookieModule,
                providers: [
                    { provide: COOKIE_OPTIONS, useValue: options },
                    { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }
                ]
            };
        };
        CookieModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [CookieOptionsProvider]
                    },] }
        ];
        return CookieModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LinkService = /** @class */ (function () {
        function LinkService(rendererFactory, document) {
            this.rendererFactory = rendererFactory;
            this.document = document;
        }
        /**
         * Inject the State into the bottom of the <head>
         */
        /**
         * Inject the State into the bottom of the <head>
         * @param {?} tag
         * @param {?=} forceCreation
         * @return {?}
         */
        LinkService.prototype.addTag = /**
         * Inject the State into the bottom of the <head>
         * @param {?} tag
         * @param {?=} forceCreation
         * @return {?}
         */
        function (tag, forceCreation) {
            try {
                /** @type {?} */
                var renderer_1 = this.rendererFactory.createRenderer(this.document, {
                    id: '-1',
                    encapsulation: core.ViewEncapsulation.None,
                    styles: [],
                    data: {}
                });
                /** @type {?} */
                var link_1 = renderer_1.createElement('link');
                /** @type {?} */
                var head = this.document.head;
                /** @type {?} */
                var selector = this._parseSelector(tag);
                if (head === null) {
                    throw new Error('<head> not found within DOCUMENT.');
                }
                Object.keys(tag).forEach((/**
                 * @param {?} prop
                 * @return {?}
                 */
                function (prop) {
                    return renderer_1.setAttribute(link_1, prop, tag[prop]);
                }));
                // [TODO]: get them to update the existing one (if it exists) ?
                renderer_1.appendChild(head, link_1);
            }
            catch (e) {
                console.error('Error within linkService : ', e);
            }
        };
        /**
         * @private
         * @param {?} tag
         * @return {?}
         */
        LinkService.prototype._parseSelector = /**
         * @private
         * @param {?} tag
         * @return {?}
         */
        function (tag) {
            // Possibly re-work this
            /** @type {?} */
            var attr = tag.rel ? 'rel' : 'hreflang';
            return attr + "=\"" + tag[attr] + "\"";
        };
        LinkService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] },
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LinkService.ctorParameters = function () { return [
            { type: core.RendererFactory2 },
            { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] }] }
        ]; };
        return LinkService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LinkModule = /** @class */ (function () {
        function LinkModule() {
        }
        LinkModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        providers: [LinkService]
                    },] }
        ];
        return LinkModule;
    }());

    exports.COOKIE_OPTIONS = COOKIE_OPTIONS;
    exports.CookieBackendService = CookieBackendService;
    exports.CookieModule = CookieModule;
    exports.CookieOptionsProvider = CookieOptionsProvider;
    exports.CookieService = CookieService;
    exports.LinkModule = LinkModule;
    exports.LinkService = LinkService;
    exports.TransferHttpModule = TransferHttpModule;
    exports.TransferHttpService = TransferHttpService;
    exports.cookieServiceFactory = cookieServiceFactory;
    exports.isBlank = isBlank;
    exports.isPresent = isPresent;
    exports.isString = isString;
    exports.mergeOptions = mergeOptions;
    exports.safeDecodeURIComponent = safeDecodeURIComponent;
    exports.safeJsonParse = safeJsonParse;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=gorniv-ngx-universal.umd.js.map
