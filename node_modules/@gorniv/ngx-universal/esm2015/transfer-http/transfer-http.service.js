/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { TransferState, makeStateKey } from '@angular/platform-browser';
import { from } from 'rxjs';
import { tap } from 'rxjs/operators';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
export class TransferHttpService {
    /**
     * @param {?} transferState
     * @param {?} httpClient
     * @param {?} platformId
     */
    constructor(transferState, httpClient, platformId) {
        this.transferState = transferState;
        this.httpClient = httpClient;
        this.platformId = platformId;
    }
    /**
     * @template T
     * @param {?} method
     * @param {?} uri
     * @param {?=} options
     * @return {?}
     */
    request(method, uri, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData(method, uri, options, (/**
         * @param {?} method
         * @param {?} url
         * @param {?} options
         * @return {?}
         */
        (method, url, options) => {
            return this.httpClient.request(method, url, options);
        }));
    }
    /**
     * Performs a request with `get` http method.
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    get(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('get', url, options, (/**
         * @param {?} _method
         * @param {?} url
         * @param {?} options
         * @return {?}
         */
        (_method, url, options) => {
            return this.httpClient.get(url, options);
        }));
    }
    /**
     * Performs a request with `post` http method.
     * @template T
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    post(url, body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('post', url, body, options, (
        // tslint:disable-next-line:no-shadowed-variable
        /**
         * @param {?} _method
         * @param {?} url
         * @param {?} body
         * @param {?} options
         * @return {?}
         */
        (_method, url, body, options) => {
            return this.httpClient.post(url, body, options);
        }));
    }
    /**
     * Performs a request with `put` http method.
     * @template T
     * @param {?} url
     * @param {?} _body
     * @param {?=} options
     * @return {?}
     */
    put(url, _body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('put', url, _body, options, (/**
         * @param {?} _method
         * @param {?} url
         * @param {?} _body
         * @param {?} options
         * @return {?}
         */
        (_method, url, _body, options) => {
            return this.httpClient.put(url, _body, options);
        }));
    }
    /**
     * Performs a request with `delete` http method.
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    delete(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('delete', url, options, (/**
         * @param {?} _method
         * @param {?} url
         * @param {?} options
         * @return {?}
         */
        (_method, url, options) => {
            return this.httpClient.delete(url, options);
        }));
    }
    /**
     * Performs a request with `patch` http method.
     * @template T
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    patch(url, body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('patch', url, body, options, (
        // tslint:disable-next-line:no-shadowed-variable
        /**
         * @param {?} _method
         * @param {?} url
         * @param {?} body
         * @param {?} options
         * @return {?}
         */
        (_method, url, body, options) => {
            return this.httpClient.patch(url, body, options);
        }));
    }
    /**
     * Performs a request with `head` http method.
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    head(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('head', url, options, (/**
         * @param {?} _method
         * @param {?} url
         * @param {?} options
         * @return {?}
         */
        (_method, url, options) => {
            return this.httpClient.head(url, options);
        }));
    }
    /**
     * Performs a request with `options` http method.
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    options(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('options', url, options, (
        // tslint:disable-next-line:no-shadowed-variable
        /**
         * @param {?} _method
         * @param {?} url
         * @param {?} options
         * @return {?}
         */
        (_method, url, options) => {
            return this.httpClient.options(url, options);
        }));
    }
    // tslint:disable-next-line:max-line-length
    /**
     * @private
     * @template T
     * @param {?} method
     * @param {?} uri
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    getData(method, uri, options, callback) {
        /** @type {?} */
        let url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        /** @type {?} */
        const tempKey = url + (options ? JSON.stringify(options) : '');
        /** @type {?} */
        const key = makeStateKey(tempKey);
        try {
            return this.resolveData(key);
        }
        catch (e) {
            return callback(method, uri, options).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (isPlatformBrowser(this.platformId)) {
                    // Client only code.
                    // nothing;
                }
                if (isPlatformServer(this.platformId)) {
                    this.setCache(key, data);
                }
            })));
        }
    }
    /**
     * @private
     * @template T
     * @param {?} _method
     * @param {?} uri
     * @param {?} body
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    getPostData(_method, uri, body, options, callback) {
        /** @type {?} */
        let url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        /** @type {?} */
        const tempKey = url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');
        /** @type {?} */
        const key = makeStateKey(tempKey);
        try {
            return this.resolveData(key);
        }
        catch (e) {
            return callback(_method, uri, body, options).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (isPlatformBrowser(this.platformId)) {
                    // Client only code.
                    // nothing;
                }
                if (isPlatformServer(this.platformId)) {
                    this.setCache(key, data);
                }
            })));
        }
    }
    /**
     * @private
     * @template T
     * @param {?} key
     * @return {?}
     */
    resolveData(key) {
        /** @type {?} */
        const data = this.getFromCache(key);
        if (!data) {
            throw new Error();
        }
        if (isPlatformBrowser(this.platformId)) {
            // Client only code.
            this.transferState.remove(key);
        }
        if (isPlatformServer(this.platformId)) {
            // Server only code.
        }
        return from(Promise.resolve(data));
    }
    /**
     * @private
     * @template T
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    setCache(key, data) {
        return this.transferState.set(key, data);
    }
    /**
     * @private
     * @template T
     * @param {?} key
     * @return {?}
     */
    getFromCache(key) {
        return this.transferState.get(key, null);
    }
}
TransferHttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TransferHttpService.ctorParameters = () => [
    { type: TransferState },
    { type: HttpClient },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    TransferHttpService.prototype.transferState;
    /**
     * @type {?}
     * @private
     */
    TransferHttpService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    TransferHttpService.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,