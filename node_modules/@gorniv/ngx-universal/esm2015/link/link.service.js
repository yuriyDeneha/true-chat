/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// https://github.com/angular/angular/issues/15776#issuecomment-291862953
import { Injectable, RendererFactory2, ViewEncapsulation, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/platform-browser';
export class LinkService {
    /**
     * @param {?} rendererFactory
     * @param {?} document
     */
    constructor(rendererFactory, document) {
        this.rendererFactory = rendererFactory;
        this.document = document;
    }
    /**
     * Inject the State into the bottom of the <head>
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */
    addTag(tag, forceCreation) {
        try {
            /** @type {?} */
            const renderer = this.rendererFactory.createRenderer(this.document, {
                id: '-1',
                encapsulation: ViewEncapsulation.None,
                styles: [],
                data: {}
            });
            /** @type {?} */
            const link = renderer.createElement('link');
            /** @type {?} */
            const head = this.document.head;
            /** @type {?} */
            const selector = this._parseSelector(tag);
            if (head === null) {
                throw new Error('<head> not found within DOCUMENT.');
            }
            Object.keys(tag).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            (prop) => {
                return renderer.setAttribute(link, prop, tag[prop]);
            }));
            // [TODO]: get them to update the existing one (if it exists) ?
            renderer.appendChild(head, link);
        }
        catch (e) {
            console.error('Error within linkService : ', e);
        }
    }
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    _parseSelector(tag) {
        // Possibly re-work this
        /** @type {?} */
        const attr = tag.rel ? 'rel' : 'hreflang';
        return `${attr}="${tag[attr]}"`;
    }
}
LinkService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
    { type: Injectable }
];
/** @nocollapse */
LinkService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    LinkService.prototype.rendererFactory;
    /**
     * @type {?}
     * @private
     */
    LinkService.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdvcm5pdi9uZ3gtdW5pdmVyc2FsLyIsInNvdXJjZXMiOlsibGluay9saW5rLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFZLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFjckQsTUFBTSxPQUFPLFdBQVc7Ozs7O0lBRXBCLFlBQ1ksZUFBaUMsRUFDZixRQUFRO1FBRDFCLG9CQUFlLEdBQWYsZUFBZSxDQUFrQjtRQUNmLGFBQVEsR0FBUixRQUFRLENBQUE7SUFFdEMsQ0FBQzs7Ozs7OztJQUtELE1BQU0sQ0FBQyxHQUFtQixFQUFFLGFBQXVCO1FBRS9DLElBQUk7O2tCQUNNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNoRSxFQUFFLEVBQUUsSUFBSTtnQkFDUixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLEVBQUU7YUFDWCxDQUFDOztrQkFFSSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7O2tCQUNyQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJOztrQkFDekIsUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDO1lBRXpDLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtnQkFDZixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7YUFDeEQ7WUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLElBQVksRUFBRSxFQUFFO2dCQUN0QyxPQUFPLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN4RCxDQUFDLEVBQUMsQ0FBQztZQUVILCtEQUErRDtZQUMvRCxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUVwQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsT0FBTyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNuRDtJQUNMLENBQUM7Ozs7OztJQUVPLGNBQWMsQ0FBQyxHQUFtQjs7O2NBRWhDLElBQUksR0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVU7UUFDakQsT0FBTyxHQUFHLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwQyxDQUFDOzs7WUF6REosVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CO1lBU0EsVUFBVTs7OztZQWRvQixnQkFBZ0I7NENBbUJ0QyxNQUFNLFNBQUMsUUFBUTs7Ozs7OztJQURoQixzQ0FBeUM7Ozs7O0lBQ3pDLCtCQUFrQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzE1Nzc2I2lzc3VlY29tbWVudC0yOTE4NjI5NTNcblxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIFJlbmRlcmVyRmFjdG9yeTIsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuLyogXG4gKiAtLSBMaW5rU2VydmljZSAtLSAgICAgICAgW1RlbXBvcmFyeV1cbiAqIEBNYXJrUGllc3pha1xuICogXG4gKiBTaW1pbGFyIHRvIE1ldGEgc2VydmljZSBidXQgbWFkZSB0byBoYW5kbGUgPGxpbms+IGNyZWF0aW9uIGZvciBTRU8gcHVycG9zZXNcbiAqIC0tIE5PVEU6IFNvb24gdGhlcmUgd2lsbCBiZSBhbiBvdmVyYWxsIERvY3VtZW50U2VydmljZSB3aXRoaW4gQW5ndWxhciB0aGF0IGhhbmRsZXMgTWV0YS9MaW5rIGV2ZXJ5dGhpbmdcbiAqL1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTGlua1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyLFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50XG4gICAgKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5qZWN0IHRoZSBTdGF0ZSBpbnRvIHRoZSBib3R0b20gb2YgdGhlIDxoZWFkPlxuICAgICAqL1xuICAgIGFkZFRhZyh0YWc6IExpbmtEZWZpbml0aW9uLCBmb3JjZUNyZWF0aW9uPzogYm9vbGVhbikge1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJlciA9IHRoaXMucmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKHRoaXMuZG9jdW1lbnQsIHtcbiAgICAgICAgICAgICAgICBpZDogJy0xJyxcbiAgICAgICAgICAgICAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgICAgICAgICAgICAgIHN0eWxlczogW10sXG4gICAgICAgICAgICAgICAgZGF0YToge31cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBsaW5rID0gcmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICAgICAgICAgICAgY29uc3QgaGVhZCA9IHRoaXMuZG9jdW1lbnQuaGVhZDtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gdGhpcy5fcGFyc2VTZWxlY3Rvcih0YWcpO1xuXG4gICAgICAgICAgICBpZiAoaGVhZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignPGhlYWQ+IG5vdCBmb3VuZCB3aXRoaW4gRE9DVU1FTlQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRhZykuZm9yRWFjaCgocHJvcDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlcmVyLnNldEF0dHJpYnV0ZShsaW5rLCBwcm9wLCB0YWdbcHJvcF0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFtUT0RPXTogZ2V0IHRoZW0gdG8gdXBkYXRlIHRoZSBleGlzdGluZyBvbmUgKGlmIGl0IGV4aXN0cykgP1xuICAgICAgICAgICAgcmVuZGVyZXIuYXBwZW5kQ2hpbGQoaGVhZCwgbGluayk7XG5cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igd2l0aGluIGxpbmtTZXJ2aWNlIDogJywgZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9wYXJzZVNlbGVjdG9yKHRhZzogTGlua0RlZmluaXRpb24pOiBzdHJpbmcge1xuICAgICAgICAvLyBQb3NzaWJseSByZS13b3JrIHRoaXNcbiAgICAgICAgY29uc3QgYXR0cjogc3RyaW5nID0gdGFnLnJlbCA/ICdyZWwnIDogJ2hyZWZsYW5nJztcbiAgICAgICAgcmV0dXJuIGAke2F0dHJ9PVwiJHt0YWdbYXR0cl19XCJgO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlY2xhcmUgdHlwZSBMaW5rRGVmaW5pdGlvbiA9IHtcbiAgICBjaGFyc2V0Pzogc3RyaW5nO1xuICAgIGNyb3Nzb3JpZ2luPzogc3RyaW5nO1xuICAgIGhyZWY/OiBzdHJpbmc7XG4gICAgaHJlZmxhbmc/OiBzdHJpbmc7XG4gICAgbWVkaWE/OiBzdHJpbmc7XG4gICAgcmVsPzogc3RyaW5nO1xuICAgIHJldj86IHN0cmluZztcbiAgICBzaXplcz86IHN0cmluZztcbiAgICB0YXJnZXQ/OiBzdHJpbmc7XG4gICAgdHlwZT86IHN0cmluZztcbn0gJiB7XG4gICAgICAgIFtwcm9wOiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTsiXX0=