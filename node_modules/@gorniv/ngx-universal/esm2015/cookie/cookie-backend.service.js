/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
import { CookieService } from './cookie.service';
import { CookieOptionsProvider } from './cookie-options-provider';
export class CookieBackendService extends CookieService {
    /**
     * @param {?} request
     * @param {?} response
     * @param {?} _optionsProvider
     */
    constructor(request, response, _optionsProvider) {
        super(_optionsProvider);
        this.request = request;
        this.response = response;
    }
    /**
     * @protected
     * @return {?}
     */
    get cookieString() {
        return this.request.cookie || this.request.headers['cookie'] || '';
    }
    /**
     * @protected
     * @param {?} val
     * @return {?}
     */
    set cookieString(val) {
        this.request.cookie = val;
        this.response.cookie = val;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    put(key, value, options = {}) {
        /** @type {?} */
        let findKey = false;
        /** @type {?} */
        let newCookie = Object.keys(this.getAll())
            // tslint:disable-next-line: no-shadowed-variable
            .map((/**
         * @param {?} keyItem
         * @return {?}
         */
        (keyItem) => {
            if (keyItem === key) {
                findKey = true;
                return `${key}=${value}`;
            }
            return `${keyItem}=${this.get(keyItem)}`;
        }))
            .join('; ');
        if (!findKey) {
            newCookie += `; ${key}=${value};`;
        }
        this.request.headers.cookie = newCookie;
        // not sure
        this.cookieString = newCookie;
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    remove(key, options) {
        /** @type {?} */
        const newCookie = Object.keys(this.getAll())
            // tslint:disable-next-line: no-shadowed-variable
            .map((/**
         * @param {?} keyItem
         * @return {?}
         */
        (keyItem) => {
            if (keyItem === key) {
                return '';
            }
            return `${keyItem}=${this.get(keyItem)}`;
        }))
            .join('; ');
        this.request.headers.cookie = newCookie;
        // not sure
        this.cookieString = newCookie;
    }
}
CookieBackendService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CookieBackendService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [REQUEST,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [RESPONSE,] }] },
    { type: CookieOptionsProvider }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CookieBackendService.prototype.request;
    /**
     * @type {?}
     * @private
     */
    CookieBackendService.prototype.response;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhY2tlbmQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnb3JuaXYvbmd4LXVuaXZlcnNhbC8iLCJzb3VyY2VzIjpbImNvb2tpZS9jb29raWUtYmFja2VuZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRXZFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUlsRSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsYUFBYTs7Ozs7O0lBQ3JELFlBQzJCLE9BQVksRUFDWCxRQUFhLEVBQ3ZDLGdCQUF1QztRQUV2QyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUpDLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFDWCxhQUFRLEdBQVIsUUFBUSxDQUFLO0lBSXpDLENBQUM7Ozs7O0lBRUQsSUFBYyxZQUFZO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JFLENBQUM7Ozs7OztJQUVELElBQWMsWUFBWSxDQUFDLEdBQVc7UUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUM3QixDQUFDOzs7Ozs7O0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxLQUFhLEVBQUUsVUFBeUIsRUFBRTs7WUFDckQsT0FBTyxHQUFHLEtBQUs7O1lBQ2YsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3hDLGlEQUFpRDthQUNoRCxHQUFHOzs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNmLElBQUksT0FBTyxLQUFLLEdBQUcsRUFBRTtnQkFDbkIsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDZixPQUFPLEdBQUcsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO2FBQzFCO1lBQ0QsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDM0MsQ0FBQyxFQUFDO2FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNiLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixTQUFTLElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxHQUFHLENBQUM7U0FDbkM7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3hDLFdBQVc7UUFDWCxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsR0FBVyxFQUFFLE9BQXVCOztjQUNuQyxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDMUMsaURBQWlEO2FBQ2hELEdBQUc7Ozs7UUFBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2YsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFO2dCQUNuQixPQUFPLEVBQUUsQ0FBQzthQUNYO1lBQ0QsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDM0MsQ0FBQyxFQUFDO2FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7UUFDeEMsV0FBVztRQUNYLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO0lBQ2hDLENBQUM7OztZQXBERixVQUFVOzs7OzRDQUdOLE1BQU0sU0FBQyxPQUFPOzRDQUNkLE1BQU0sU0FBQyxRQUFRO1lBUFgscUJBQXFCOzs7Ozs7O0lBTTFCLHVDQUFxQzs7Ozs7SUFDckMsd0NBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSRVFVRVNULCBSRVNQT05TRSB9IGZyb20gJ0BuZ3VuaXZlcnNhbC9leHByZXNzLWVuZ2luZS90b2tlbnMnO1xuXG5pbXBvcnQgeyBDb29raWVTZXJ2aWNlIH0gZnJvbSAnLi9jb29raWUuc2VydmljZSc7XG5pbXBvcnQgeyBDb29raWVPcHRpb25zUHJvdmlkZXIgfSBmcm9tICcuL2Nvb2tpZS1vcHRpb25zLXByb3ZpZGVyJztcbmltcG9ydCB7IENvb2tpZU9wdGlvbnMgfSBmcm9tICcuL2Nvb2tpZS1vcHRpb25zLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvb2tpZUJhY2tlbmRTZXJ2aWNlIGV4dGVuZHMgQ29va2llU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUkVRVUVTVCkgcHJpdmF0ZSByZXF1ZXN0OiBhbnksXG4gICAgQEluamVjdChSRVNQT05TRSkgcHJpdmF0ZSByZXNwb25zZTogYW55LFxuICAgIF9vcHRpb25zUHJvdmlkZXI6IENvb2tpZU9wdGlvbnNQcm92aWRlcixcbiAgKSB7XG4gICAgc3VwZXIoX29wdGlvbnNQcm92aWRlcik7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IGNvb2tpZVN0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QuY29va2llIHx8IHRoaXMucmVxdWVzdC5oZWFkZXJzWydjb29raWUnXSB8fCAnJztcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXQgY29va2llU3RyaW5nKHZhbDogc3RyaW5nKSB7XG4gICAgdGhpcy5yZXF1ZXN0LmNvb2tpZSA9IHZhbDtcbiAgICB0aGlzLnJlc3BvbnNlLmNvb2tpZSA9IHZhbDtcbiAgfVxuXG4gIHB1dChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgb3B0aW9uczogQ29va2llT3B0aW9ucyA9IHt9KTogdm9pZCB7XG4gICAgbGV0IGZpbmRLZXkgPSBmYWxzZTtcbiAgICBsZXQgbmV3Q29va2llID0gT2JqZWN0LmtleXModGhpcy5nZXRBbGwoKSlcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc2hhZG93ZWQtdmFyaWFibGVcbiAgICAgIC5tYXAoKGtleUl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGtleUl0ZW0gPT09IGtleSkge1xuICAgICAgICAgIGZpbmRLZXkgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBgJHtrZXl9PSR7dmFsdWV9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7a2V5SXRlbX09JHt0aGlzLmdldChrZXlJdGVtKX1gO1xuICAgICAgfSlcbiAgICAgIC5qb2luKCc7ICcpO1xuICAgIGlmICghZmluZEtleSkge1xuICAgICAgbmV3Q29va2llICs9IGA7ICR7a2V5fT0ke3ZhbHVlfTtgO1xuICAgIH1cbiAgICB0aGlzLnJlcXVlc3QuaGVhZGVycy5jb29raWUgPSBuZXdDb29raWU7XG4gICAgLy8gbm90IHN1cmVcbiAgICB0aGlzLmNvb2tpZVN0cmluZyA9IG5ld0Nvb2tpZTtcbiAgfVxuXG4gIHJlbW92ZShrZXk6IHN0cmluZywgb3B0aW9ucz86IENvb2tpZU9wdGlvbnMpOiB2b2lkIHtcbiAgICBjb25zdCBuZXdDb29raWUgPSBPYmplY3Qua2V5cyh0aGlzLmdldEFsbCgpKVxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1zaGFkb3dlZC12YXJpYWJsZVxuICAgICAgLm1hcCgoa2V5SXRlbSkgPT4ge1xuICAgICAgICBpZiAoa2V5SXRlbSA9PT0ga2V5KSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtrZXlJdGVtfT0ke3RoaXMuZ2V0KGtleUl0ZW0pfWA7XG4gICAgICB9KVxuICAgICAgLmpvaW4oJzsgJyk7XG4gICAgdGhpcy5yZXF1ZXN0LmhlYWRlcnMuY29va2llID0gbmV3Q29va2llO1xuICAgIC8vIG5vdCBzdXJlXG4gICAgdGhpcy5jb29raWVTdHJpbmcgPSBuZXdDb29raWU7XG4gIH1cbn1cbiJdfQ==