/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { CookieOptionsProvider } from './cookie-options-provider';
import { isBlank, isString, mergeOptions, safeDecodeURIComponent, safeJsonParse } from './utils';
/**
 * @record
 */
export function ICookieService() { }
if (false) {
    /**
     * @param {?} key
     * @return {?}
     */
    ICookieService.prototype.get = function (key) { };
    /**
     * @param {?} key
     * @return {?}
     */
    ICookieService.prototype.getObject = function (key) { };
    /**
     * @return {?}
     */
    ICookieService.prototype.getAll = function () { };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    ICookieService.prototype.put = function (key, value, options) { };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    ICookieService.prototype.putObject = function (key, value, options) { };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    ICookieService.prototype.remove = function (key, options) { };
    /**
     * @param {?=} options
     * @return {?}
     */
    ICookieService.prototype.removeAll = function (options) { };
}
export class CookieService {
    /**
     * @param {?} _optionsProvider
     */
    constructor(_optionsProvider) {
        this._optionsProvider = _optionsProvider;
        this.options = this._optionsProvider.options;
    }
    /**
     * @protected
     * @return {?}
     */
    get cookieString() {
        return document.cookie || '';
    }
    /**
     * @protected
     * @param {?} val
     * @return {?}
     */
    set cookieString(val) {
        document.cookie = val;
    }
    /**
     * \@name CookieService#get
     *
     * \@description
     * Returns the value of given cookie key.
     *
     * @param {?} key Id to use for lookup.
     * @return {?} Raw cookie value.
     */
    get(key) {
        return ((/** @type {?} */ (this._cookieReader())))[key];
    }
    /**
     * \@name CookieService#getObject
     *
     * \@description
     * Returns the deserialized value of given cookie key.
     *
     * @param {?} key Id to use for lookup.
     * @return {?} Deserialized cookie value.
     */
    getObject(key) {
        /** @type {?} */
        const value = this.get(key);
        return value ? safeJsonParse(value) : value;
    }
    /**
     * \@name CookieService#getAll
     *
     * \@description
     * Returns a key value object with all the cookies.
     *
     * @return {?} All cookies
     */
    getAll() {
        return (/** @type {?} */ (this._cookieReader()));
    }
    /**
     * \@name CookieService#put
     *
     * \@description
     * Sets a value for given cookie key.
     *
     * @param {?} key Id for the `value`.
     * @param {?} value Raw value to be stored.
     * @param {?=} options (Optional) Options object.
     * @return {?}
     */
    put(key, value, options) {
        this._cookieWriter()(key, value, options);
    }
    /**
     * \@name CookieService#putObject
     *
     * \@description
     * Serializes and sets a value for given cookie key.
     *
     * @param {?} key Id for the `value`.
     * @param {?} value Value to be stored.
     * @param {?=} options (Optional) Options object.
     * @return {?}
     */
    putObject(key, value, options) {
        this.put(key, JSON.stringify(value), options);
    }
    /**
     * \@name CookieService#remove
     *
     * \@description
     * Remove given cookie.
     *
     * @param {?} key Id of the key-value pair to delete.
     * @param {?=} options (Optional) Options object.
     * @return {?}
     */
    remove(key, options) {
        this._cookieWriter()(key, undefined, options);
    }
    /**
     * \@name CookieService#removeAll
     *
     * \@description
     * Remove all cookies.
     * @param {?=} options
     * @return {?}
     */
    removeAll(options) {
        /** @type {?} */
        const cookies = this.getAll();
        Object.keys(cookies).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            this.remove(key, options);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _cookieReader() {
        /** @type {?} */
        let lastCookies = {};
        /** @type {?} */
        let lastCookieString = '';
        /** @type {?} */
        let cookieArray;
        /** @type {?} */
        let cookie;
        /** @type {?} */
        let i;
        /** @type {?} */
        let index;
        /** @type {?} */
        let name;
        /** @type {?} */
        const currentCookieString = this.cookieString;
        if (currentCookieString !== lastCookieString) {
            lastCookieString = currentCookieString;
            cookieArray = lastCookieString.split('; ');
            lastCookies = {};
            for (i = 0; i < cookieArray.length; i++) {
                cookie = cookieArray[i];
                index = cookie.indexOf('=');
                if (index > 0) { // ignore nameless cookies
                    name = safeDecodeURIComponent(cookie.substring(0, index));
                    // the first value that is seen for a cookie is the most
                    // specific one.  values for the same cookie name that
                    // follow are for less specific paths.
                    if (isBlank(((/** @type {?} */ (lastCookies)))[name])) {
                        ((/** @type {?} */ (lastCookies)))[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                    }
                }
            }
        }
        return lastCookies;
    }
    /**
     * @private
     * @return {?}
     */
    _cookieWriter() {
        /** @type {?} */
        const that = this;
        return (/**
         * @param {?} name
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        function (name, value, options) {
            that.cookieString = that._buildCookieString(name, value, options);
        });
    }
    /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    _buildCookieString(name, value, options) {
        /** @type {?} */
        const opts = mergeOptions(this.options, options);
        /** @type {?} */
        let expires = opts.expires;
        if (isBlank(value)) {
            expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
            value = '';
        }
        if (isString(expires)) {
            expires = new Date(expires);
        }
        /** @type {?} */
        const cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);
        /** @type {?} */
        let str = encodeURIComponent(name) + '=' + cookieValue;
        str += opts.path ? ';path=' + opts.path : '';
        str += opts.domain ? ';domain=' + opts.domain : '';
        str += expires ? ';expires=' + expires.toUTCString() : '';
        str += opts.secure ? ';secure' : '';
        str += opts.httpOnly ? '; HttpOnly' : '';
        // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
        // - 300 cookies
        // - 20 cookies per unique domain
        // - 4096 bytes per cookie
        /** @type {?} */
        const cookieLength = str.length + 1;
        if (cookieLength > 4096) {
            console.log(`Cookie \'${name}\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);
        }
        return str;
    }
}
CookieService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CookieService.ctorParameters = () => [
    { type: CookieOptionsProvider }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    CookieService.prototype.options;
    /**
     * @type {?}
     * @private
     */
    CookieService.prototype._optionsProvider;
}
//# sourceMappingURL=data:application/json;base64,