{"version":3,"file":"gorniv-ngx-universal.js","sources":["ng://@gorniv/ngx-universal/transfer-http/transfer-http.service.ts","ng://@gorniv/ngx-universal/transfer-http/transfer-http.module.ts","ng://@gorniv/ngx-universal/cookie/utils.ts","ng://@gorniv/ngx-universal/cookie/cookie-options-provider.ts","ng://@gorniv/ngx-universal/cookie/cookie.service.ts","ng://@gorniv/ngx-universal/cookie/cookie-backend.service.ts","ng://@gorniv/ngx-universal/cookie/cookie.factory.ts","ng://@gorniv/ngx-universal/cookie/cookie.module.ts","ng://@gorniv/ngx-universal/link/link.service.ts","ng://@gorniv/ngx-universal/link/link.module.ts"],"sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { TransferState, StateKey, makeStateKey } from '@angular/platform-browser';\nimport { Observable, from } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class TransferHttpService {\n  constructor(\n    protected transferState: TransferState,\n    private httpClient: HttpClient,\n    @Inject(PLATFORM_ID) private platformId: Object,\n  ) {}\n\n  request<T>(\n    method: string,\n    uri: string | Request,\n    options?: {\n      body?: any;\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>(method, uri, options, (method: string, url: string, options: any) => {\n      return this.httpClient.request<T>(method, url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('get', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.get<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>(\n      'post',\n      url,\n      body,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, body: any, options: any) => {\n        return this.httpClient.post<T>(url, body, options);\n      },\n    );\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put<T>(\n    url: string,\n    _body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>(\n      'put',\n      url,\n      _body,\n      options,\n      (_method: string, url: string, _body: any, options: any) => {\n        return this.httpClient.put<T>(url, _body, options);\n      },\n    );\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('delete', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.delete<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>(\n      'patch',\n      url,\n      body,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, body: any, options: any): Observable<any> => {\n        return this.httpClient.patch<T>(url, body, options);\n      },\n    );\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('head', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.head<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>(\n      'options',\n      url,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, options: any) => {\n        return this.httpClient.options<T>(url, options);\n      },\n    );\n  }\n\n  // tslint:disable-next-line:max-line-length\n  private getData<T>(\n    method: string,\n    uri: string | Request,\n    options: any,\n    callback: (method: string, uri: string | Request, options: any) => Observable<any>,\n  ): Observable<T> {\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const tempKey = url + (options ? JSON.stringify(options) : '');\n    const key = makeStateKey<T>(tempKey);\n    try {\n      return this.resolveData<T>(key);\n    } catch (e) {\n      return callback(method, uri, options).pipe(\n        tap((data: T) => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache<T>(key, data);\n          }\n        }),\n      );\n    }\n  }\n\n  private getPostData<T>(\n    _method: string,\n    uri: string | Request,\n    body: any,\n    options: any,\n    callback: (method: string, uri: string | Request, body: any, options: any) => Observable<any>,\n  ): Observable<T> {\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const tempKey =\n      url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');\n    const key = makeStateKey<T>(tempKey);\n\n    try {\n      return this.resolveData<T>(key);\n    } catch (e) {\n      return callback(_method, uri, body, options).pipe(\n        tap((data: T) => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache<T>(key, data);\n          }\n        }),\n      );\n    }\n  }\n\n  private resolveData<T>(key: StateKey<T>): Observable<T> {\n    const data = this.getFromCache<T>(key);\n\n    if (!data) {\n      throw new Error();\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      this.transferState.remove(key);\n    }\n    if (isPlatformServer(this.platformId)) {\n      // Server only code.\n    }\n\n    return from(Promise.resolve<T>(data));\n  }\n\n  private setCache<T>(key: StateKey<T>, data: T): void {\n    return this.transferState.set<T>(key, data);\n  }\n\n  private getFromCache<T>(key: StateKey<T>): T {\n    return this.transferState.get<T>(key, null);\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { TransferHttpService } from './transfer-http.service';\n\n@NgModule({\n  providers: [TransferHttpService],\n})\nexport class TransferHttpModule {}\n","import { CookieOptions } from './cookie-options.model';\n\nexport function isBlank(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isPresent(obj: any): boolean {\n  return obj !== undefined && obj !== null;\n}\n\nexport function isString(obj: any): obj is string {\n  return typeof obj === 'string';\n}\n\nexport function mergeOptions(oldOptions: CookieOptions, newOptions?: CookieOptions): CookieOptions {\n  if (!newOptions) {\n    return oldOptions;\n  }\n  return {\n    path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n    domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n    expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n    secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n    httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,\n    storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded,\n  };\n}\n\nexport function safeDecodeURIComponent(str: string) {\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n\nexport function safeJsonParse(str: string) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return str;\n  }\n}\n","import { Inject, Injectable, InjectionToken, Injector } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\n\nimport { CookieOptions } from './cookie-options.model';\nimport { mergeOptions } from './utils';\n\nexport const COOKIE_OPTIONS = new InjectionToken<CookieOptions>('COOKIE_OPTIONS');\n\n@Injectable()\nexport class CookieOptionsProvider {\n\n  private defaultOptions: CookieOptions;\n  private _options: CookieOptions;\n\n  constructor(@Inject(COOKIE_OPTIONS) options: CookieOptions = {},\n              private _injector: Injector) {\n    this.defaultOptions = {\n      path: this._injector.get(APP_BASE_HREF, '/'),\n      domain: null,\n      expires: null,\n      secure: false,\n      httpOnly: false\n    };\n    this._options = mergeOptions(this.defaultOptions, options);\n  }\n\n  get options(): CookieOptions {\n    return this._options;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { CookieOptionsProvider } from './cookie-options-provider';\nimport { CookieOptions } from './cookie-options.model';\nimport { isBlank, isString, mergeOptions, safeDecodeURIComponent, safeJsonParse } from './utils';\n\ndeclare interface Document {\n  cookie: string;\n}\ndeclare const document: Document;\n\nexport interface ICookieService {\n  get(key: string): string;\n  getObject(key: string): Object;\n  getAll(): Object;\n  put(key: string, value: string, options?: CookieOptions): void;\n  putObject(key: string, value: Object, options?: CookieOptions): void;\n  remove(key: string, options?: CookieOptions): void;\n  removeAll(options?: CookieOptions): void;\n}\n\n@Injectable()\nexport class CookieService implements ICookieService {\n\n  protected options: CookieOptions;\n\n  protected get cookieString(): string {\n    return document.cookie || '';\n  }\n\n  protected set cookieString(val: string) {\n    document.cookie = val;\n  }\n\n  constructor(private _optionsProvider: CookieOptionsProvider) {\n    this.options = this._optionsProvider.options;\n  }\n\n  /**\n   * @name CookieService#get\n   *\n   * @description\n   * Returns the value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Raw cookie value.\n   */\n  get(key: string): string {\n    return (<any>this._cookieReader())[key];\n  }\n\n  /**\n   * @name CookieService#getObject\n   *\n   * @description\n   * Returns the deserialized value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Deserialized cookie value.\n   */\n  getObject(key: string): Object {\n    const value = this.get(key);\n    return value ? safeJsonParse(value) : value;\n  }\n\n  /**\n   * @name CookieService#getAll\n   *\n   * @description\n   * Returns a key value object with all the cookies.\n   *\n   * @returns All cookies\n   */\n  getAll(): Object {\n    return <any>this._cookieReader();\n  }\n\n  /**\n   * @name CookieService#put\n   *\n   * @description\n   * Sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Raw value to be stored.\n   * @param options (Optional) Options object.\n   */\n  put(key: string, value: string, options?: CookieOptions) {\n    this._cookieWriter()(key, value, options);\n  }\n\n  /**\n   * @name CookieService#putObject\n   *\n   * @description\n   * Serializes and sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Value to be stored.\n   * @param options (Optional) Options object.\n   */\n  putObject(key: string, value: Object, options?: CookieOptions) {\n    this.put(key, JSON.stringify(value), options);\n  }\n\n  /**\n   * @name CookieService#remove\n   *\n   * @description\n   * Remove given cookie.\n   *\n   * @param key Id of the key-value pair to delete.\n   * @param options (Optional) Options object.\n   */\n  remove(key: string, options?: CookieOptions): void {\n    this._cookieWriter()(key, undefined, options);\n  }\n\n  /**\n   * @name CookieService#removeAll\n   *\n   * @description\n   * Remove all cookies.\n   */\n  removeAll(options?: CookieOptions): void {\n    const cookies = this.getAll();\n    Object.keys(cookies).forEach(key => {\n      this.remove(key, options);\n    });\n  }\n\n  private _cookieReader(): Object {\n    let lastCookies = {};\n    let lastCookieString = '';\n    let cookieArray: string[], cookie: string, i: number, index: number, name: string;\n    const currentCookieString = this.cookieString;\n    if (currentCookieString !== lastCookieString) {\n      lastCookieString = currentCookieString;\n      cookieArray = lastCookieString.split('; ');\n      lastCookies = {};\n      for (i = 0; i < cookieArray.length; i++) {\n        cookie = cookieArray[i];\n        index = cookie.indexOf('=');\n        if (index > 0) {  // ignore nameless cookies\n          name = safeDecodeURIComponent(cookie.substring(0, index));\n          // the first value that is seen for a cookie is the most\n          // specific one.  values for the same cookie name that\n          // follow are for less specific paths.\n          if (isBlank((<any>lastCookies)[name])) {\n            (<any>lastCookies)[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n          }\n        }\n      }\n    }\n    return lastCookies;\n  }\n\n  private _cookieWriter() {\n    const that = this;\n\n    return function (name: string, value: string, options?: CookieOptions) {\n      that.cookieString = that._buildCookieString(name, value, options);\n    };\n  }\n\n  private _buildCookieString(name: string, value: string, options?: CookieOptions): string {\n    const opts: CookieOptions = mergeOptions(this.options, options);\n    let expires: any = opts.expires;\n    if (isBlank(value)) {\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n      value = '';\n    }\n    if (isString(expires)) {\n      expires = new Date(expires);\n    }\n    const cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);\n    let str = encodeURIComponent(name) + '=' + cookieValue;\n    str += opts.path ? ';path=' + opts.path : '';\n    str += opts.domain ? ';domain=' + opts.domain : '';\n    str += expires ? ';expires=' + expires.toUTCString() : '';\n    str += opts.secure ? ';secure' : '';\n    str += opts.httpOnly ? '; HttpOnly' : '';\n\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n    // - 300 cookies\n    // - 20 cookies per unique domain\n    // - 4096 bytes per cookie\n    const cookieLength = str.length + 1;\n    if (cookieLength > 4096) {\n      console.log(`Cookie \\'${name}\\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);\n    }\n    return str;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';\n\nimport { CookieService } from './cookie.service';\nimport { CookieOptionsProvider } from './cookie-options-provider';\nimport { CookieOptions } from './cookie-options.model';\n\n@Injectable()\nexport class CookieBackendService extends CookieService {\n  constructor(\n    @Inject(REQUEST) private request: any,\n    @Inject(RESPONSE) private response: any,\n    _optionsProvider: CookieOptionsProvider,\n  ) {\n    super(_optionsProvider);\n  }\n\n  protected get cookieString(): string {\n    return this.request.cookie || this.request.headers['cookie'] || '';\n  }\n\n  protected set cookieString(val: string) {\n    this.request.cookie = val;\n    this.response.cookie = val;\n  }\n\n  put(key: string, value: string, options: CookieOptions = {}): void {\n    let findKey = false;\n    let newCookie = Object.keys(this.getAll())\n      // tslint:disable-next-line: no-shadowed-variable\n      .map((keyItem) => {\n        if (keyItem === key) {\n          findKey = true;\n          return `${key}=${value}`;\n        }\n        return `${keyItem}=${this.get(keyItem)}`;\n      })\n      .join('; ');\n    if (!findKey) {\n      newCookie += `; ${key}=${value};`;\n    }\n    this.request.headers.cookie = newCookie;\n    // not sure\n    this.cookieString = newCookie;\n  }\n\n  remove(key: string, options?: CookieOptions): void {\n    const newCookie = Object.keys(this.getAll())\n      // tslint:disable-next-line: no-shadowed-variable\n      .map((keyItem) => {\n        if (keyItem === key) {\n          return '';\n        }\n        return `${keyItem}=${this.get(keyItem)}`;\n      })\n      .join('; ');\n    this.request.headers.cookie = newCookie;\n    // not sure\n    this.cookieString = newCookie;\n  }\n}\n","import { CookieService } from './cookie.service';\nimport { CookieOptionsProvider } from './cookie-options-provider';\n\nexport function cookieServiceFactory(cookieOptionsProvider: CookieOptionsProvider): CookieService {\n  return new CookieService(cookieOptionsProvider);\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CookieOptionsProvider, COOKIE_OPTIONS } from './cookie-options-provider';\nimport { CookieService } from './cookie.service';\nimport { CookieOptions } from './cookie-options.model';\nimport { cookieServiceFactory } from './cookie.factory';\n\n@NgModule({\n  providers: [CookieOptionsProvider]\n})\nexport class CookieModule {\n  /**\n   * Use this method in your root module to provide the CookieService\n   */\n  static forRoot(options: CookieOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider]}\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(options: CookieOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider]}\n      ]\n    };\n  }\n}\n","// https://github.com/angular/angular/issues/15776#issuecomment-291862953\n\nimport { Injectable, Optional, RendererFactory2, ViewEncapsulation, Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\n/* \n * -- LinkService --        [Temporary]\n * @MarkPieszak\n * \n * Similar to Meta service but made to handle <link> creation for SEO purposes\n * -- NOTE: Soon there will be an overall DocumentService within Angular that handles Meta/Link everything\n */\n\n@Injectable()\nexport class LinkService {\n\n    constructor(\n        private rendererFactory: RendererFactory2,\n        @Inject(DOCUMENT) private document\n    ) {\n    }\n\n    /**\n     * Inject the State into the bottom of the <head>\n     */\n    addTag(tag: LinkDefinition, forceCreation?: boolean) {\n\n        try {\n            const renderer = this.rendererFactory.createRenderer(this.document, {\n                id: '-1',\n                encapsulation: ViewEncapsulation.None,\n                styles: [],\n                data: {}\n            });\n\n            const link = renderer.createElement('link');\n            const head = this.document.head;\n            const selector = this._parseSelector(tag);\n\n            if (head === null) {\n                throw new Error('<head> not found within DOCUMENT.');\n            }\n\n            Object.keys(tag).forEach((prop: string) => {\n                return renderer.setAttribute(link, prop, tag[prop]);\n            });\n\n            // [TODO]: get them to update the existing one (if it exists) ?\n            renderer.appendChild(head, link);\n\n        } catch (e) {\n            console.error('Error within linkService : ', e);\n        }\n    }\n\n    private _parseSelector(tag: LinkDefinition): string {\n        // Possibly re-work this\n        const attr: string = tag.rel ? 'rel' : 'hreflang';\n        return `${attr}=\"${tag[attr]}\"`;\n    }\n}\n\nexport declare type LinkDefinition = {\n    charset?: string;\n    crossorigin?: string;\n    href?: string;\n    hreflang?: string;\n    media?: string;\n    rel?: string;\n    rev?: string;\n    sizes?: string;\n    target?: string;\n    type?: string;\n} & {\n        [prop: string]: string;\n    };","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LinkService } from './link.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [LinkService]\n})\nexport class LinkModule { }\n"],"names":["tslib_1.__extends"],"mappings":"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"}