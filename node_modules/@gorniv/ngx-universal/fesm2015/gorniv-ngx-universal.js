import { Injectable, Inject, PLATFORM_ID, NgModule, InjectionToken, Injector, ViewEncapsulation, RendererFactory2 } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { makeStateKey, TransferState, DOCUMENT } from '@angular/platform-browser';
import { from } from 'rxjs';
import { tap } from 'rxjs/operators';
import { isPlatformBrowser, isPlatformServer, APP_BASE_HREF, CommonModule } from '@angular/common';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TransferHttpService {
    /**
     * @param {?} transferState
     * @param {?} httpClient
     * @param {?} platformId
     */
    constructor(transferState, httpClient, platformId) {
        this.transferState = transferState;
        this.httpClient = httpClient;
        this.platformId = platformId;
    }
    /**
     * @template T
     * @param {?} method
     * @param {?} uri
     * @param {?=} options
     * @return {?}
     */
    request(method, uri, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData(method, uri, options, (/**
         * @param {?} method
         * @param {?} url
         * @param {?} options
         * @return {?}
         */
        (method, url, options) => {
            return this.httpClient.request(method, url, options);
        }));
    }
    /**
     * Performs a request with `get` http method.
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    get(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('get', url, options, (/**
         * @param {?} _method
         * @param {?} url
         * @param {?} options
         * @return {?}
         */
        (_method, url, options) => {
            return this.httpClient.get(url, options);
        }));
    }
    /**
     * Performs a request with `post` http method.
     * @template T
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    post(url, body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('post', url, body, options, (
        // tslint:disable-next-line:no-shadowed-variable
        /**
         * @param {?} _method
         * @param {?} url
         * @param {?} body
         * @param {?} options
         * @return {?}
         */
        (_method, url, body, options) => {
            return this.httpClient.post(url, body, options);
        }));
    }
    /**
     * Performs a request with `put` http method.
     * @template T
     * @param {?} url
     * @param {?} _body
     * @param {?=} options
     * @return {?}
     */
    put(url, _body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('put', url, _body, options, (/**
         * @param {?} _method
         * @param {?} url
         * @param {?} _body
         * @param {?} options
         * @return {?}
         */
        (_method, url, _body, options) => {
            return this.httpClient.put(url, _body, options);
        }));
    }
    /**
     * Performs a request with `delete` http method.
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    delete(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('delete', url, options, (/**
         * @param {?} _method
         * @param {?} url
         * @param {?} options
         * @return {?}
         */
        (_method, url, options) => {
            return this.httpClient.delete(url, options);
        }));
    }
    /**
     * Performs a request with `patch` http method.
     * @template T
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    patch(url, body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('patch', url, body, options, (
        // tslint:disable-next-line:no-shadowed-variable
        /**
         * @param {?} _method
         * @param {?} url
         * @param {?} body
         * @param {?} options
         * @return {?}
         */
        (_method, url, body, options) => {
            return this.httpClient.patch(url, body, options);
        }));
    }
    /**
     * Performs a request with `head` http method.
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    head(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('head', url, options, (/**
         * @param {?} _method
         * @param {?} url
         * @param {?} options
         * @return {?}
         */
        (_method, url, options) => {
            return this.httpClient.head(url, options);
        }));
    }
    /**
     * Performs a request with `options` http method.
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    options(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('options', url, options, (
        // tslint:disable-next-line:no-shadowed-variable
        /**
         * @param {?} _method
         * @param {?} url
         * @param {?} options
         * @return {?}
         */
        (_method, url, options) => {
            return this.httpClient.options(url, options);
        }));
    }
    // tslint:disable-next-line:max-line-length
    /**
     * @private
     * @template T
     * @param {?} method
     * @param {?} uri
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    getData(method, uri, options, callback) {
        /** @type {?} */
        let url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        /** @type {?} */
        const tempKey = url + (options ? JSON.stringify(options) : '');
        /** @type {?} */
        const key = makeStateKey(tempKey);
        try {
            return this.resolveData(key);
        }
        catch (e) {
            return callback(method, uri, options).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (isPlatformBrowser(this.platformId)) ;
                if (isPlatformServer(this.platformId)) {
                    this.setCache(key, data);
                }
            })));
        }
    }
    /**
     * @private
     * @template T
     * @param {?} _method
     * @param {?} uri
     * @param {?} body
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    getPostData(_method, uri, body, options, callback) {
        /** @type {?} */
        let url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        /** @type {?} */
        const tempKey = url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');
        /** @type {?} */
        const key = makeStateKey(tempKey);
        try {
            return this.resolveData(key);
        }
        catch (e) {
            return callback(_method, uri, body, options).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (isPlatformBrowser(this.platformId)) ;
                if (isPlatformServer(this.platformId)) {
                    this.setCache(key, data);
                }
            })));
        }
    }
    /**
     * @private
     * @template T
     * @param {?} key
     * @return {?}
     */
    resolveData(key) {
        /** @type {?} */
        const data = this.getFromCache(key);
        if (!data) {
            throw new Error();
        }
        if (isPlatformBrowser(this.platformId)) {
            // Client only code.
            this.transferState.remove(key);
        }
        if (isPlatformServer(this.platformId)) ;
        return from(Promise.resolve(data));
    }
    /**
     * @private
     * @template T
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    setCache(key, data) {
        return this.transferState.set(key, data);
    }
    /**
     * @private
     * @template T
     * @param {?} key
     * @return {?}
     */
    getFromCache(key) {
        return this.transferState.get(key, null);
    }
}
TransferHttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TransferHttpService.ctorParameters = () => [
    { type: TransferState },
    { type: HttpClient },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TransferHttpModule {
}
TransferHttpModule.decorators = [
    { type: NgModule, args: [{
                providers: [TransferHttpService],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank(obj) {
    return obj === undefined || obj === null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isPresent(obj) {
    return obj !== undefined && obj !== null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isString(obj) {
    return typeof obj === 'string';
}
/**
 * @param {?} oldOptions
 * @param {?=} newOptions
 * @return {?}
 */
function mergeOptions(oldOptions, newOptions) {
    if (!newOptions) {
        return oldOptions;
    }
    return {
        path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,
        domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,
        expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,
        secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,
        httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,
        storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded,
    };
}
/**
 * @param {?} str
 * @return {?}
 */
function safeDecodeURIComponent(str) {
    try {
        return decodeURIComponent(str);
    }
    catch (e) {
        return str;
    }
}
/**
 * @param {?} str
 * @return {?}
 */
function safeJsonParse(str) {
    try {
        return JSON.parse(str);
    }
    catch (e) {
        return str;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const COOKIE_OPTIONS = new InjectionToken('COOKIE_OPTIONS');
class CookieOptionsProvider {
    /**
     * @param {?=} options
     * @param {?=} _injector
     */
    constructor(options = {}, _injector) {
        this._injector = _injector;
        this.defaultOptions = {
            path: this._injector.get(APP_BASE_HREF, '/'),
            domain: null,
            expires: null,
            secure: false,
            httpOnly: false
        };
        this._options = mergeOptions(this.defaultOptions, options);
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
}
CookieOptionsProvider.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CookieOptionsProvider.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COOKIE_OPTIONS,] }] },
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CookieService {
    /**
     * @param {?} _optionsProvider
     */
    constructor(_optionsProvider) {
        this._optionsProvider = _optionsProvider;
        this.options = this._optionsProvider.options;
    }
    /**
     * @protected
     * @return {?}
     */
    get cookieString() {
        return document.cookie || '';
    }
    /**
     * @protected
     * @param {?} val
     * @return {?}
     */
    set cookieString(val) {
        document.cookie = val;
    }
    /**
     * \@name CookieService#get
     *
     * \@description
     * Returns the value of given cookie key.
     *
     * @param {?} key Id to use for lookup.
     * @return {?} Raw cookie value.
     */
    get(key) {
        return ((/** @type {?} */ (this._cookieReader())))[key];
    }
    /**
     * \@name CookieService#getObject
     *
     * \@description
     * Returns the deserialized value of given cookie key.
     *
     * @param {?} key Id to use for lookup.
     * @return {?} Deserialized cookie value.
     */
    getObject(key) {
        /** @type {?} */
        const value = this.get(key);
        return value ? safeJsonParse(value) : value;
    }
    /**
     * \@name CookieService#getAll
     *
     * \@description
     * Returns a key value object with all the cookies.
     *
     * @return {?} All cookies
     */
    getAll() {
        return (/** @type {?} */ (this._cookieReader()));
    }
    /**
     * \@name CookieService#put
     *
     * \@description
     * Sets a value for given cookie key.
     *
     * @param {?} key Id for the `value`.
     * @param {?} value Raw value to be stored.
     * @param {?=} options (Optional) Options object.
     * @return {?}
     */
    put(key, value, options) {
        this._cookieWriter()(key, value, options);
    }
    /**
     * \@name CookieService#putObject
     *
     * \@description
     * Serializes and sets a value for given cookie key.
     *
     * @param {?} key Id for the `value`.
     * @param {?} value Value to be stored.
     * @param {?=} options (Optional) Options object.
     * @return {?}
     */
    putObject(key, value, options) {
        this.put(key, JSON.stringify(value), options);
    }
    /**
     * \@name CookieService#remove
     *
     * \@description
     * Remove given cookie.
     *
     * @param {?} key Id of the key-value pair to delete.
     * @param {?=} options (Optional) Options object.
     * @return {?}
     */
    remove(key, options) {
        this._cookieWriter()(key, undefined, options);
    }
    /**
     * \@name CookieService#removeAll
     *
     * \@description
     * Remove all cookies.
     * @param {?=} options
     * @return {?}
     */
    removeAll(options) {
        /** @type {?} */
        const cookies = this.getAll();
        Object.keys(cookies).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            this.remove(key, options);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _cookieReader() {
        /** @type {?} */
        let lastCookies = {};
        /** @type {?} */
        let lastCookieString = '';
        /** @type {?} */
        let cookieArray;
        /** @type {?} */
        let cookie;
        /** @type {?} */
        let i;
        /** @type {?} */
        let index;
        /** @type {?} */
        let name;
        /** @type {?} */
        const currentCookieString = this.cookieString;
        if (currentCookieString !== lastCookieString) {
            lastCookieString = currentCookieString;
            cookieArray = lastCookieString.split('; ');
            lastCookies = {};
            for (i = 0; i < cookieArray.length; i++) {
                cookie = cookieArray[i];
                index = cookie.indexOf('=');
                if (index > 0) { // ignore nameless cookies
                    name = safeDecodeURIComponent(cookie.substring(0, index));
                    // the first value that is seen for a cookie is the most
                    // specific one.  values for the same cookie name that
                    // follow are for less specific paths.
                    if (isBlank(((/** @type {?} */ (lastCookies)))[name])) {
                        ((/** @type {?} */ (lastCookies)))[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                    }
                }
            }
        }
        return lastCookies;
    }
    /**
     * @private
     * @return {?}
     */
    _cookieWriter() {
        /** @type {?} */
        const that = this;
        return (/**
         * @param {?} name
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        function (name, value, options) {
            that.cookieString = that._buildCookieString(name, value, options);
        });
    }
    /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    _buildCookieString(name, value, options) {
        /** @type {?} */
        const opts = mergeOptions(this.options, options);
        /** @type {?} */
        let expires = opts.expires;
        if (isBlank(value)) {
            expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
            value = '';
        }
        if (isString(expires)) {
            expires = new Date(expires);
        }
        /** @type {?} */
        const cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);
        /** @type {?} */
        let str = encodeURIComponent(name) + '=' + cookieValue;
        str += opts.path ? ';path=' + opts.path : '';
        str += opts.domain ? ';domain=' + opts.domain : '';
        str += expires ? ';expires=' + expires.toUTCString() : '';
        str += opts.secure ? ';secure' : '';
        str += opts.httpOnly ? '; HttpOnly' : '';
        // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
        // - 300 cookies
        // - 20 cookies per unique domain
        // - 4096 bytes per cookie
        /** @type {?} */
        const cookieLength = str.length + 1;
        if (cookieLength > 4096) {
            console.log(`Cookie \'${name}\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);
        }
        return str;
    }
}
CookieService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CookieService.ctorParameters = () => [
    { type: CookieOptionsProvider }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CookieBackendService extends CookieService {
    /**
     * @param {?} request
     * @param {?} response
     * @param {?} _optionsProvider
     */
    constructor(request, response, _optionsProvider) {
        super(_optionsProvider);
        this.request = request;
        this.response = response;
    }
    /**
     * @protected
     * @return {?}
     */
    get cookieString() {
        return this.request.cookie || this.request.headers['cookie'] || '';
    }
    /**
     * @protected
     * @param {?} val
     * @return {?}
     */
    set cookieString(val) {
        this.request.cookie = val;
        this.response.cookie = val;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    put(key, value, options = {}) {
        /** @type {?} */
        let findKey = false;
        /** @type {?} */
        let newCookie = Object.keys(this.getAll())
            // tslint:disable-next-line: no-shadowed-variable
            .map((/**
         * @param {?} keyItem
         * @return {?}
         */
        (keyItem) => {
            if (keyItem === key) {
                findKey = true;
                return `${key}=${value}`;
            }
            return `${keyItem}=${this.get(keyItem)}`;
        }))
            .join('; ');
        if (!findKey) {
            newCookie += `; ${key}=${value};`;
        }
        this.request.headers.cookie = newCookie;
        // not sure
        this.cookieString = newCookie;
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    remove(key, options) {
        /** @type {?} */
        const newCookie = Object.keys(this.getAll())
            // tslint:disable-next-line: no-shadowed-variable
            .map((/**
         * @param {?} keyItem
         * @return {?}
         */
        (keyItem) => {
            if (keyItem === key) {
                return '';
            }
            return `${keyItem}=${this.get(keyItem)}`;
        }))
            .join('; ');
        this.request.headers.cookie = newCookie;
        // not sure
        this.cookieString = newCookie;
    }
}
CookieBackendService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CookieBackendService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [REQUEST,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [RESPONSE,] }] },
    { type: CookieOptionsProvider }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} cookieOptionsProvider
 * @return {?}
 */
function cookieServiceFactory(cookieOptionsProvider) {
    return new CookieService(cookieOptionsProvider);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CookieModule {
    /**
     * Use this method in your root module to provide the CookieService
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options = {}) {
        return {
            ngModule: CookieModule,
            providers: [
                { provide: COOKIE_OPTIONS, useValue: options },
                { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }
            ]
        };
    }
    /**
     * Use this method in your other (non root) modules to import the directive/pipe
     * @param {?=} options
     * @return {?}
     */
    static forChild(options = {}) {
        return {
            ngModule: CookieModule,
            providers: [
                { provide: COOKIE_OPTIONS, useValue: options },
                { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }
            ]
        };
    }
}
CookieModule.decorators = [
    { type: NgModule, args: [{
                providers: [CookieOptionsProvider]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LinkService {
    /**
     * @param {?} rendererFactory
     * @param {?} document
     */
    constructor(rendererFactory, document) {
        this.rendererFactory = rendererFactory;
        this.document = document;
    }
    /**
     * Inject the State into the bottom of the <head>
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */
    addTag(tag, forceCreation) {
        try {
            /** @type {?} */
            const renderer = this.rendererFactory.createRenderer(this.document, {
                id: '-1',
                encapsulation: ViewEncapsulation.None,
                styles: [],
                data: {}
            });
            /** @type {?} */
            const link = renderer.createElement('link');
            /** @type {?} */
            const head = this.document.head;
            /** @type {?} */
            const selector = this._parseSelector(tag);
            if (head === null) {
                throw new Error('<head> not found within DOCUMENT.');
            }
            Object.keys(tag).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            (prop) => {
                return renderer.setAttribute(link, prop, tag[prop]);
            }));
            // [TODO]: get them to update the existing one (if it exists) ?
            renderer.appendChild(head, link);
        }
        catch (e) {
            console.error('Error within linkService : ', e);
        }
    }
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    _parseSelector(tag) {
        // Possibly re-work this
        /** @type {?} */
        const attr = tag.rel ? 'rel' : 'hreflang';
        return `${attr}="${tag[attr]}"`;
    }
}
LinkService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
    { type: Injectable }
];
/** @nocollapse */
LinkService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LinkModule {
}
LinkModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                providers: [LinkService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { COOKIE_OPTIONS, CookieBackendService, CookieModule, CookieOptionsProvider, CookieService, LinkModule, LinkService, TransferHttpModule, TransferHttpService, cookieServiceFactory, isBlank, isPresent, isString, mergeOptions, safeDecodeURIComponent, safeJsonParse };
//# sourceMappingURL=gorniv-ngx-universal.js.map
