{"version":3,"sources":["ng://@ngx-meta/core/src/models/page-title-positioning.ts","ng://@ngx-meta/core/src/meta.loader.ts","ng://@ngx-meta/core/src/meta.service.ts","ng://@ngx-meta/core/src/util.ts","ng://@ngx-meta/core/src/meta.guard.ts","ng://@ngx-meta/core/index.ts"],"names":["PageTitlePositioning","MetaLoader","MetaStaticLoader","providedSettings","pageTitlePositioning","PrependPageTitle","defaults","this","Object","defineProperty","prototype","MetaService","loader","title","meta","settings","isMetaTagSet","setTitle","override","_this","callback","observableOf","subscribe","res","fullTitle","pageTitleSeparator","applicationName","getTitleWithPositioning","updateTitle","defaultTitle","setTag","key","value","Error","cur","updateTag","update","currentUrl","metaSettings","disabled","keys","forEach","replace","currentLocale","updateLocales","fallbackTitle","undefined","url","applicationUrl","removeTag","value$","obj","then","observableFrom","AppendPageTitle","String","property","content","availableLocales","getTags","element","removeTagElement","split","locale","addTag","lastIndexOf","name","getTag","Injectable","Title","Meta","MetaGuard","canActivate","route","state","hasOwnProperty","data","canActivateChild","metaFactory","MetaModule","parentModule","forRoot","configuredProvider","provide","useFactory","ngModule","providers","NgModule","decorators","type","Optional","SkipSelf"],"mappings":"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","sourcesContent":["export enum PageTitlePositioning {\r\n  /**\r\n   * append page title after application name\r\n   */\r\n  AppendPageTitle = 0,\r\n  /**\r\n   * prepend page title before application name\r\n   */\r\n  PrependPageTitle = 10\r\n}\r\n","import { MetaSettings } from './models/meta-settings';\r\nimport { PageTitlePositioning } from './models/page-title-positioning';\r\n\r\nexport abstract class MetaLoader {\r\n  abstract get settings(): MetaSettings;\r\n}\r\n\r\nexport class MetaStaticLoader implements MetaLoader {\r\n  get settings(): MetaSettings {\r\n    return this.providedSettings;\r\n  }\r\n\r\n  constructor(\r\n    private readonly providedSettings: MetaSettings = {\r\n      pageTitlePositioning: PageTitlePositioning.PrependPageTitle,\r\n      defaults: {}\r\n    }\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Meta, Title } from '@angular/platform-browser';\r\nimport { from as observableFrom, Observable, of as observableOf } from 'rxjs';\r\n\r\nimport { MetaLoader } from './meta.loader';\r\nimport { MetaSettings } from './models/meta-settings';\r\nimport { PageTitlePositioning } from './models/page-title-positioning';\r\nimport { isObservable, isPromise } from './util';\r\n\r\n@Injectable()\r\nexport class MetaService {\r\n  protected readonly settings: MetaSettings;\r\n  private readonly isMetaTagSet: any;\r\n\r\n  constructor(readonly loader: MetaLoader, private readonly title: Title, private readonly meta: Meta) {\r\n    this.settings = loader.settings;\r\n    this.isMetaTagSet = {};\r\n  }\r\n\r\n  setTitle(title: string, override = false): void {\r\n    const title$ = title ? this.callback(title) : observableOf('');\r\n\r\n    title$.subscribe((res: string) => {\r\n      let fullTitle = '';\r\n\r\n      if (!res) {\r\n        const defaultTitle$ =\r\n          this.settings.defaults && this.settings.defaults.title ? this.callback(this.settings.defaults.title) : observableOf('');\r\n\r\n        defaultTitle$.subscribe((defaultTitle: string) => {\r\n          if (!override && this.settings.pageTitleSeparator && this.settings.applicationName) {\r\n            this.callback(this.settings.applicationName).subscribe((applicationName: string) => {\r\n              fullTitle = applicationName ? this.getTitleWithPositioning(defaultTitle, applicationName) : defaultTitle;\r\n              this.updateTitle(fullTitle);\r\n            });\r\n          } else {\r\n            this.updateTitle(defaultTitle);\r\n          }\r\n        });\r\n      } else if (!override && this.settings.pageTitleSeparator && this.settings.applicationName) {\r\n        this.callback(this.settings.applicationName).subscribe((applicationName: string) => {\r\n          fullTitle = applicationName ? this.getTitleWithPositioning(res, applicationName) : res;\r\n          this.updateTitle(fullTitle);\r\n        });\r\n      } else {\r\n        this.updateTitle(res);\r\n      }\r\n    });\r\n  }\r\n\r\n  setTag(key: string, value: string): void {\r\n    if (key === 'title') {\r\n      throw new Error(\r\n        `Attempt to set ${key} through \"setTag\": \"title\" is a reserved tag name. ` + 'Please use `MetaService.setTitle` instead.'\r\n      );\r\n    }\r\n\r\n    const cur = value || (this.settings.defaults && this.settings.defaults[key] ? this.settings.defaults[key] : '');\r\n\r\n    const value$ = key !== 'og:locale' && key !== 'og:locale:alternate' ? this.callback(cur) : observableOf(cur);\r\n\r\n    value$.subscribe((res: string) => {\r\n      this.updateTag(key, res);\r\n    });\r\n  }\r\n\r\n  update(currentUrl: string, metaSettings?: any): void {\r\n    if (!metaSettings) {\r\n      const fallbackTitle = this.settings.defaults\r\n        ? this.settings.defaults.title || this.settings.applicationName\r\n        : this.settings.applicationName;\r\n\r\n      this.setTitle(fallbackTitle, true);\r\n    } else {\r\n      if (metaSettings.disabled) {\r\n        this.update(currentUrl);\r\n\r\n        return;\r\n      }\r\n\r\n      this.setTitle(metaSettings.title, metaSettings.override);\r\n\r\n      Object.keys(metaSettings).forEach(key => {\r\n        let value = metaSettings[key];\r\n\r\n        if (key === 'title' || key === 'override') {\r\n          return;\r\n        } else if (key === 'og:locale') {\r\n          value = value.replace(/-/g, '_');\r\n        } else if (key === 'og:locale:alternate') {\r\n          const currentLocale = metaSettings['og:locale'];\r\n          this.updateLocales(currentLocale, metaSettings[key]);\r\n\r\n          return;\r\n        }\r\n\r\n        this.setTag(key, value);\r\n      });\r\n    }\r\n\r\n    if (this.settings.defaults) {\r\n      Object.keys(this.settings.defaults).forEach(key => {\r\n        let value = this.settings.defaults[key];\r\n\r\n        if ((metaSettings && (key in this.isMetaTagSet || key in metaSettings)) || key === 'title' || key === 'override') {\r\n          return;\r\n        } else if (key === 'og:locale') {\r\n          value = value.replace(/-/g, '_');\r\n        } else if (key === 'og:locale:alternate') {\r\n          const currentLocale = metaSettings ? metaSettings['og:locale'] : undefined;\r\n          this.updateLocales(currentLocale, value);\r\n\r\n          return;\r\n        }\r\n\r\n        this.setTag(key, value);\r\n      });\r\n    }\r\n\r\n    const baseUrl = this.settings.applicationUrl ? this.settings.applicationUrl : '/';\r\n    const url = `${baseUrl}${currentUrl}`.replace(/(https?:\\/\\/)|(\\/)+/g, '$1$2').replace(/\\/$/g, '');\r\n\r\n    this.setTag('og:url', url ? url : '/');\r\n  }\r\n\r\n  removeTag(key: string): void {\r\n    this.meta.removeTag(key);\r\n  }\r\n\r\n  private callback(value: string): Observable<string> {\r\n    if (this.settings.callback) {\r\n      const value$ = this.settings.callback(value);\r\n\r\n      if (!isObservable(value$)) {\r\n        return isPromise(value$) ? observableFrom(value$) : observableOf(value$);\r\n      }\r\n\r\n      return value$;\r\n    }\r\n\r\n    return observableOf(value);\r\n  }\r\n\r\n  private getTitleWithPositioning(title: string, applicationName: string): string {\r\n    switch (this.settings.pageTitlePositioning) {\r\n      case PageTitlePositioning.AppendPageTitle:\r\n        return applicationName + String(this.settings.pageTitleSeparator) + title;\r\n      case PageTitlePositioning.PrependPageTitle:\r\n        return title + String(this.settings.pageTitleSeparator) + applicationName;\r\n      default:\r\n        throw new Error(`Invalid pageTitlePositioning specified [${this.settings.pageTitlePositioning}]!`);\r\n    }\r\n  }\r\n\r\n  private updateTitle(title: string): void {\r\n    this.title.setTitle(title);\r\n    this.meta.updateTag({\r\n      property: 'og:title',\r\n      content: title\r\n    });\r\n  }\r\n\r\n  private updateLocales(currentLocale: string, availableLocales: string): void {\r\n    const cur = currentLocale || (this.settings.defaults ? this.settings.defaults['og:locale'] : '');\r\n\r\n    if (cur && this.settings.defaults) {\r\n      this.settings.defaults['og:locale'] = cur.replace(/_/g, '-');\r\n    }\r\n\r\n    // TODO: set HTML lang attribute - https://github.com/ngx-meta/core/issues/32\r\n    // const html = this.document.querySelector('html');\r\n    // html.setAttribute('lang', cur);\r\n\r\n    const elements = this.meta.getTags('property=\"og:locale:alternate\"');\r\n\r\n    elements.forEach((element: any) => {\r\n      this.meta.removeTagElement(element);\r\n    });\r\n\r\n    if (cur && availableLocales) {\r\n      availableLocales.split(',').forEach((locale: string) => {\r\n        if (cur.replace(/-/g, '_') !== locale.replace(/-/g, '_')) {\r\n          this.meta.addTag({\r\n            property: 'og:locale:alternate',\r\n            content: locale.replace(/-/g, '_')\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private updateTag(key: string, value: string): void {\r\n    if (key.lastIndexOf('og:', 0) === 0) {\r\n      this.meta.updateTag({\r\n        property: key,\r\n        content: key === 'og:locale' ? value.replace(/-/g, '_') : value\r\n      });\r\n    } else {\r\n      this.meta.updateTag({\r\n        name: key,\r\n        content: value\r\n      });\r\n    }\r\n\r\n    this.isMetaTagSet[key] = true;\r\n\r\n    if (key === 'description') {\r\n      this.meta.updateTag({\r\n        property: 'og:description',\r\n        content: value\r\n      });\r\n    } else if (key === 'author') {\r\n      this.meta.updateTag({\r\n        property: 'og:author',\r\n        content: value\r\n      });\r\n    } else if (key === 'publisher') {\r\n      this.meta.updateTag({\r\n        property: 'og:publisher',\r\n        content: value\r\n      });\r\n    } else if (key === 'og:locale') {\r\n      const availableLocales = this.settings.defaults ? this.settings.defaults['og:locale:alternate'] : '';\r\n\r\n      this.updateLocales(value, availableLocales);\r\n      this.isMetaTagSet['og:locale:alternate'] = true;\r\n    } else if (key === 'og:locale:alternate') {\r\n      const currentLocale = this.meta.getTag('property=\"og:locale\"').content;\r\n\r\n      this.updateLocales(currentLocale, value);\r\n      this.isMetaTagSet['og:locale'] = true;\r\n    }\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nexport const isPromise = (obj: any): obj is Promise<any> => !!obj && typeof obj.then === 'function';\r\n\r\nexport const isObservable = (obj: any | Observable<any>): obj is Observable<any> => !!obj && typeof obj.subscribe === 'function';\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { MetaService } from './meta.service';\r\n\r\n@Injectable()\r\nexport class MetaGuard implements CanActivate, CanActivateChild {\r\n  constructor(private readonly meta: MetaService) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const url = state.url;\r\n\r\n    const metaSettings = route.hasOwnProperty('data') ? route.data.meta : undefined;\r\n\r\n    this.meta.update(url, metaSettings);\r\n\r\n    return true;\r\n  }\r\n\r\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    return this.canActivate(route, state);\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\nimport { MetaGuard } from './src/meta.guard';\r\nimport { MetaLoader, MetaStaticLoader } from './src/meta.loader';\r\nimport { MetaService } from './src/meta.service';\r\n\r\nexport * from './src/models/meta-settings';\r\nexport * from './src/models/page-title-positioning';\r\nexport * from './src/meta.guard';\r\nexport * from './src/meta.loader';\r\nexport * from './src/meta.service';\r\n\r\n// for AoT compilation\r\n// tslint:disable-next-line\r\nexport function metaFactory(): MetaLoader {\r\n  return new MetaStaticLoader();\r\n}\r\n\r\n@NgModule()\r\nexport class MetaModule {\r\n  static forRoot(\r\n    configuredProvider: any = {\r\n      provide: MetaLoader,\r\n      useFactory: metaFactory\r\n    }\r\n  ): ModuleWithProviders {\r\n    return {\r\n      ngModule: MetaModule,\r\n      providers: [configuredProvider, MetaGuard, MetaService]\r\n    };\r\n  }\r\n\r\n  constructor(@Optional() @SkipSelf() parentModule?: MetaModule) {\r\n    if (parentModule) {\r\n      throw new Error('MetaModule already loaded; import in root module only.');\r\n    }\r\n  }\r\n}\r\n"]}