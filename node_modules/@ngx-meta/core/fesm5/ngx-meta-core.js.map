{"version":3,"file":"ngx-meta-core.js.map","sources":["ng://@ngx-meta/core/src/models/page-title-positioning.ts","ng://@ngx-meta/core/src/meta.loader.ts","ng://@ngx-meta/core/src/util.ts","ng://@ngx-meta/core/src/meta.service.ts","ng://@ngx-meta/core/src/meta.guard.ts","ng://@ngx-meta/core/index.ts"],"sourcesContent":["export enum PageTitlePositioning {\r\n  /**\r\n   * append page title after application name\r\n   */\r\n  AppendPageTitle = 0,\r\n  /**\r\n   * prepend page title before application name\r\n   */\r\n  PrependPageTitle = 10\r\n}\r\n","import { MetaSettings } from './models/meta-settings';\r\nimport { PageTitlePositioning } from './models/page-title-positioning';\r\n\r\nexport abstract class MetaLoader {\r\n  abstract get settings(): MetaSettings;\r\n}\r\n\r\nexport class MetaStaticLoader implements MetaLoader {\r\n  get settings(): MetaSettings {\r\n    return this.providedSettings;\r\n  }\r\n\r\n  constructor(\r\n    private readonly providedSettings: MetaSettings = {\r\n      pageTitlePositioning: PageTitlePositioning.PrependPageTitle,\r\n      defaults: {}\r\n    }\r\n  ) {}\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nexport const isPromise = (obj: any): obj is Promise<any> => !!obj && typeof obj.then === 'function';\r\n\r\nexport const isObservable = (obj: any | Observable<any>): obj is Observable<any> => !!obj && typeof obj.subscribe === 'function';\r\n","import { Injectable } from '@angular/core';\r\nimport { Meta, Title } from '@angular/platform-browser';\r\nimport { from as observableFrom, Observable, of as observableOf } from 'rxjs';\r\n\r\nimport { MetaLoader } from './meta.loader';\r\nimport { MetaSettings } from './models/meta-settings';\r\nimport { PageTitlePositioning } from './models/page-title-positioning';\r\nimport { isObservable, isPromise } from './util';\r\n\r\n@Injectable()\r\nexport class MetaService {\r\n  protected readonly settings: MetaSettings;\r\n  private readonly isMetaTagSet: any;\r\n\r\n  constructor(readonly loader: MetaLoader, private readonly title: Title, private readonly meta: Meta) {\r\n    this.settings = loader.settings;\r\n    this.isMetaTagSet = {};\r\n  }\r\n\r\n  setTitle(title: string, override = false): void {\r\n    const title$ = title ? this.callback(title) : observableOf('');\r\n\r\n    title$.subscribe((res: string) => {\r\n      let fullTitle = '';\r\n\r\n      if (!res) {\r\n        const defaultTitle$ =\r\n          this.settings.defaults && this.settings.defaults.title ? this.callback(this.settings.defaults.title) : observableOf('');\r\n\r\n        defaultTitle$.subscribe((defaultTitle: string) => {\r\n          if (!override && this.settings.pageTitleSeparator && this.settings.applicationName) {\r\n            this.callback(this.settings.applicationName).subscribe((applicationName: string) => {\r\n              fullTitle = applicationName ? this.getTitleWithPositioning(defaultTitle, applicationName) : defaultTitle;\r\n              this.updateTitle(fullTitle);\r\n            });\r\n          } else {\r\n            this.updateTitle(defaultTitle);\r\n          }\r\n        });\r\n      } else if (!override && this.settings.pageTitleSeparator && this.settings.applicationName) {\r\n        this.callback(this.settings.applicationName).subscribe((applicationName: string) => {\r\n          fullTitle = applicationName ? this.getTitleWithPositioning(res, applicationName) : res;\r\n          this.updateTitle(fullTitle);\r\n        });\r\n      } else {\r\n        this.updateTitle(res);\r\n      }\r\n    });\r\n  }\r\n\r\n  setTag(key: string, value: string): void {\r\n    if (key === 'title') {\r\n      throw new Error(\r\n        `Attempt to set ${key} through \"setTag\": \"title\" is a reserved tag name. ` + 'Please use `MetaService.setTitle` instead.'\r\n      );\r\n    }\r\n\r\n    const cur = value || (this.settings.defaults && this.settings.defaults[key] ? this.settings.defaults[key] : '');\r\n\r\n    const value$ = key !== 'og:locale' && key !== 'og:locale:alternate' ? this.callback(cur) : observableOf(cur);\r\n\r\n    value$.subscribe((res: string) => {\r\n      this.updateTag(key, res);\r\n    });\r\n  }\r\n\r\n  update(currentUrl: string, metaSettings?: any): void {\r\n    if (!metaSettings) {\r\n      const fallbackTitle = this.settings.defaults\r\n        ? this.settings.defaults.title || this.settings.applicationName\r\n        : this.settings.applicationName;\r\n\r\n      this.setTitle(fallbackTitle, true);\r\n    } else {\r\n      if (metaSettings.disabled) {\r\n        this.update(currentUrl);\r\n\r\n        return;\r\n      }\r\n\r\n      this.setTitle(metaSettings.title, metaSettings.override);\r\n\r\n      Object.keys(metaSettings).forEach(key => {\r\n        let value = metaSettings[key];\r\n\r\n        if (key === 'title' || key === 'override') {\r\n          return;\r\n        } else if (key === 'og:locale') {\r\n          value = value.replace(/-/g, '_');\r\n        } else if (key === 'og:locale:alternate') {\r\n          const currentLocale = metaSettings['og:locale'];\r\n          this.updateLocales(currentLocale, metaSettings[key]);\r\n\r\n          return;\r\n        }\r\n\r\n        this.setTag(key, value);\r\n      });\r\n    }\r\n\r\n    if (this.settings.defaults) {\r\n      Object.keys(this.settings.defaults).forEach(key => {\r\n        let value = this.settings.defaults[key];\r\n\r\n        if ((metaSettings && (key in this.isMetaTagSet || key in metaSettings)) || key === 'title' || key === 'override') {\r\n          return;\r\n        } else if (key === 'og:locale') {\r\n          value = value.replace(/-/g, '_');\r\n        } else if (key === 'og:locale:alternate') {\r\n          const currentLocale = metaSettings ? metaSettings['og:locale'] : undefined;\r\n          this.updateLocales(currentLocale, value);\r\n\r\n          return;\r\n        }\r\n\r\n        this.setTag(key, value);\r\n      });\r\n    }\r\n\r\n    const baseUrl = this.settings.applicationUrl ? this.settings.applicationUrl : '/';\r\n    const url = `${baseUrl}${currentUrl}`.replace(/(https?:\\/\\/)|(\\/)+/g, '$1$2').replace(/\\/$/g, '');\r\n\r\n    this.setTag('og:url', url ? url : '/');\r\n  }\r\n\r\n  removeTag(key: string): void {\r\n    this.meta.removeTag(key);\r\n  }\r\n\r\n  private callback(value: string): Observable<string> {\r\n    if (this.settings.callback) {\r\n      const value$ = this.settings.callback(value);\r\n\r\n      if (!isObservable(value$)) {\r\n        return isPromise(value$) ? observableFrom(value$) : observableOf(value$);\r\n      }\r\n\r\n      return value$;\r\n    }\r\n\r\n    return observableOf(value);\r\n  }\r\n\r\n  private getTitleWithPositioning(title: string, applicationName: string): string {\r\n    switch (this.settings.pageTitlePositioning) {\r\n      case PageTitlePositioning.AppendPageTitle:\r\n        return applicationName + String(this.settings.pageTitleSeparator) + title;\r\n      case PageTitlePositioning.PrependPageTitle:\r\n        return title + String(this.settings.pageTitleSeparator) + applicationName;\r\n      default:\r\n        throw new Error(`Invalid pageTitlePositioning specified [${this.settings.pageTitlePositioning}]!`);\r\n    }\r\n  }\r\n\r\n  private updateTitle(title: string): void {\r\n    this.title.setTitle(title);\r\n    this.meta.updateTag({\r\n      property: 'og:title',\r\n      content: title\r\n    });\r\n  }\r\n\r\n  private updateLocales(currentLocale: string, availableLocales: string): void {\r\n    const cur = currentLocale || (this.settings.defaults ? this.settings.defaults['og:locale'] : '');\r\n\r\n    if (cur && this.settings.defaults) {\r\n      this.settings.defaults['og:locale'] = cur.replace(/_/g, '-');\r\n    }\r\n\r\n    // TODO: set HTML lang attribute - https://github.com/ngx-meta/core/issues/32\r\n    // const html = this.document.querySelector('html');\r\n    // html.setAttribute('lang', cur);\r\n\r\n    const elements = this.meta.getTags('property=\"og:locale:alternate\"');\r\n\r\n    elements.forEach((element: any) => {\r\n      this.meta.removeTagElement(element);\r\n    });\r\n\r\n    if (cur && availableLocales) {\r\n      availableLocales.split(',').forEach((locale: string) => {\r\n        if (cur.replace(/-/g, '_') !== locale.replace(/-/g, '_')) {\r\n          this.meta.addTag({\r\n            property: 'og:locale:alternate',\r\n            content: locale.replace(/-/g, '_')\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private updateTag(key: string, value: string): void {\r\n    if (key.lastIndexOf('og:', 0) === 0) {\r\n      this.meta.updateTag({\r\n        property: key,\r\n        content: key === 'og:locale' ? value.replace(/-/g, '_') : value\r\n      });\r\n    } else {\r\n      this.meta.updateTag({\r\n        name: key,\r\n        content: value\r\n      });\r\n    }\r\n\r\n    this.isMetaTagSet[key] = true;\r\n\r\n    if (key === 'description') {\r\n      this.meta.updateTag({\r\n        property: 'og:description',\r\n        content: value\r\n      });\r\n    } else if (key === 'author') {\r\n      this.meta.updateTag({\r\n        property: 'og:author',\r\n        content: value\r\n      });\r\n    } else if (key === 'publisher') {\r\n      this.meta.updateTag({\r\n        property: 'og:publisher',\r\n        content: value\r\n      });\r\n    } else if (key === 'og:locale') {\r\n      const availableLocales = this.settings.defaults ? this.settings.defaults['og:locale:alternate'] : '';\r\n\r\n      this.updateLocales(value, availableLocales);\r\n      this.isMetaTagSet['og:locale:alternate'] = true;\r\n    } else if (key === 'og:locale:alternate') {\r\n      const currentLocale = this.meta.getTag('property=\"og:locale\"').content;\r\n\r\n      this.updateLocales(currentLocale, value);\r\n      this.isMetaTagSet['og:locale'] = true;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { MetaService } from './meta.service';\r\n\r\n@Injectable()\r\nexport class MetaGuard implements CanActivate, CanActivateChild {\r\n  constructor(private readonly meta: MetaService) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const url = state.url;\r\n\r\n    const metaSettings = route.hasOwnProperty('data') ? route.data.meta : undefined;\r\n\r\n    this.meta.update(url, metaSettings);\r\n\r\n    return true;\r\n  }\r\n\r\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    return this.canActivate(route, state);\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\nimport { MetaGuard } from './src/meta.guard';\r\nimport { MetaLoader, MetaStaticLoader } from './src/meta.loader';\r\nimport { MetaService } from './src/meta.service';\r\n\r\nexport * from './src/models/meta-settings';\r\nexport * from './src/models/page-title-positioning';\r\nexport * from './src/meta.guard';\r\nexport * from './src/meta.loader';\r\nexport * from './src/meta.service';\r\n\r\n// for AoT compilation\r\n// tslint:disable-next-line\r\nexport function metaFactory(): MetaLoader {\r\n  return new MetaStaticLoader();\r\n}\r\n\r\n@NgModule()\r\nexport class MetaModule {\r\n  static forRoot(\r\n    configuredProvider: any = {\r\n      provide: MetaLoader,\r\n      useFactory: metaFactory\r\n    }\r\n  ): ModuleWithProviders {\r\n    return {\r\n      ngModule: MetaModule,\r\n      providers: [configuredProvider, MetaGuard, MetaService]\r\n    };\r\n  }\r\n\r\n  constructor(@Optional() @SkipSelf() parentModule?: MetaModule) {\r\n    if (parentModule) {\r\n      throw new Error('MetaModule already loaded; import in root module only.');\r\n    }\r\n  }\r\n}\r\n"],"names":["observableOf","observableFrom"],"mappings":";;;;IAAY,oBASX;AATD,WAAY,oBAAoB;IAI9B,qFAAmB,CAAA;IAInB,wFAAqB,CAAA;CACtB,EATW,oBAAoB,KAApB,oBAAoB,QAS/B;;;ICND;KAEC;IAAD,iBAAC;CAAA,IAAA;;IAOC,0BACmB,gBAGhB;QAHgB,iCAAA,EAAA;YACf,oBAAoB,EAAE,oBAAoB,CAAC,gBAAgB;YAC3D,QAAQ,EAAE,EAAE;SACb;QAHgB,qBAAgB,GAAhB,gBAAgB,CAGhC;KACC;IATJ,sBAAI,sCAAQ;aAAZ;YACE,OAAO,IAAI,CAAC,gBAAgB,CAAC;SAC9B;;;OAAA;IAQH,uBAAC;CAAA;;AChBM,IAAM,SAAS,GAAG,UAAC,GAAQ,IAA0B,OAAA,CAAC,CAAC,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,GAAA,CAAC;AAEpG,AAAO,IAAM,YAAY,GAAG,UAAC,GAA0B,IAA6B,OAAA,CAAC,CAAC,GAAG,IAAI,OAAO,GAAG,CAAC,SAAS,KAAK,UAAU,GAAA,CAAC;;;ICU/H,qBAAqB,MAAkB,EAAmB,KAAY,EAAmB,IAAU;QAA9E,WAAM,GAAN,MAAM,CAAY;QAAmB,UAAK,GAAL,KAAK,CAAO;QAAmB,SAAI,GAAJ,IAAI,CAAM;QACjG,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;KACxB;IAED,8BAAQ,GAAR,UAAS,KAAa,EAAE,QAAgB;QAAxC,iBA6BC;QA7BuB,yBAAA,EAAA,gBAAgB;QACtC,IAAM,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAGA,EAAY,CAAC,EAAE,CAAC,CAAC;QAE/D,MAAM,CAAC,SAAS,CAAC,UAAC,GAAW;YAC3B,IAAI,SAAS,GAAG,EAAE,CAAC;YAEnB,IAAI,CAAC,GAAG,EAAE;gBACR,IAAM,aAAa,GACjB,KAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAGA,EAAY,CAAC,EAAE,CAAC,CAAC;gBAE1H,aAAa,CAAC,SAAS,CAAC,UAAC,YAAoB;oBAC3C,IAAI,CAAC,QAAQ,IAAI,KAAI,CAAC,QAAQ,CAAC,kBAAkB,IAAI,KAAI,CAAC,QAAQ,CAAC,eAAe,EAAE;wBAClF,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,UAAC,eAAuB;4BAC7E,SAAS,GAAG,eAAe,GAAG,KAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,YAAY,CAAC;4BACzG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;yBAC7B,CAAC,CAAC;qBACJ;yBAAM;wBACL,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;qBAChC;iBACF,CAAC,CAAC;aACJ;iBAAM,IAAI,CAAC,QAAQ,IAAI,KAAI,CAAC,QAAQ,CAAC,kBAAkB,IAAI,KAAI,CAAC,QAAQ,CAAC,eAAe,EAAE;gBACzF,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,UAAC,eAAuB;oBAC7E,SAAS,GAAG,eAAe,GAAG,KAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,eAAe,CAAC,GAAG,GAAG,CAAC;oBACvF,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;iBAC7B,CAAC,CAAC;aACJ;iBAAM;gBACL,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aACvB;SACF,CAAC,CAAC;KACJ;IAED,4BAAM,GAAN,UAAO,GAAW,EAAE,KAAa;QAAjC,iBAcC;QAbC,IAAI,GAAG,KAAK,OAAO,EAAE;YACnB,MAAM,IAAI,KAAK,CACb,oBAAkB,GAAG,4DAAqD,GAAG,4CAA4C,CAC1H,CAAC;SACH;QAED,IAAM,GAAG,GAAG,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;QAEhH,IAAM,MAAM,GAAG,GAAG,KAAK,WAAW,IAAI,GAAG,KAAK,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAGA,EAAY,CAAC,GAAG,CAAC,CAAC;QAE7G,MAAM,CAAC,SAAS,CAAC,UAAC,GAAW;YAC3B,KAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAC1B,CAAC,CAAC;KACJ;IAED,4BAAM,GAAN,UAAO,UAAkB,EAAE,YAAkB;QAA7C,iBAyDC;QAxDC,IAAI,CAAC,YAAY,EAAE;YACjB,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ;kBACxC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe;kBAC7D,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC;YAElC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACpC;aAAM;YACL,IAAI,YAAY,CAAC,QAAQ,EAAE;gBACzB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBAExB,OAAO;aACR;YAED,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;YAEzD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gBACnC,IAAI,KAAK,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;gBAE9B,IAAI,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,UAAU,EAAE;oBACzC,OAAO;iBACR;qBAAM,IAAI,GAAG,KAAK,WAAW,EAAE;oBAC9B,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;iBAClC;qBAAM,IAAI,GAAG,KAAK,qBAAqB,EAAE;oBACxC,IAAM,aAAa,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;oBAChD,KAAI,CAAC,aAAa,CAAC,aAAa,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;oBAErD,OAAO;iBACR;gBAED,KAAI,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACzB,CAAC,CAAC;SACJ;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gBAC7C,IAAI,KAAK,GAAG,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAExC,IAAI,CAAC,YAAY,KAAK,GAAG,IAAI,KAAI,CAAC,YAAY,IAAI,GAAG,IAAI,YAAY,CAAC,KAAK,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,UAAU,EAAE;oBAChH,OAAO;iBACR;qBAAM,IAAI,GAAG,KAAK,WAAW,EAAE;oBAC9B,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;iBAClC;qBAAM,IAAI,GAAG,KAAK,qBAAqB,EAAE;oBACxC,IAAM,aAAa,GAAG,YAAY,GAAG,YAAY,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;oBAC3E,KAAI,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;oBAEzC,OAAO;iBACR;gBAED,KAAI,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACzB,CAAC,CAAC;SACJ;QAED,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,GAAG,CAAC;QAClF,IAAM,GAAG,GAAG,CAAA,KAAG,OAAO,GAAG,UAAY,EAAC,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAElG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;KACxC;IAED,+BAAS,GAAT,UAAU,GAAW;QACnB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;KAC1B;IAEO,8BAAQ,GAAhB,UAAiB,KAAa;QAC5B,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAC1B,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAE7C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;gBACzB,OAAO,SAAS,CAAC,MAAM,CAAC,GAAGC,IAAc,CAAC,MAAM,CAAC,GAAGD,EAAY,CAAC,MAAM,CAAC,CAAC;aAC1E;YAED,OAAO,MAAM,CAAC;SACf;QAED,OAAOA,EAAY,CAAC,KAAK,CAAC,CAAC;KAC5B;IAEO,6CAAuB,GAA/B,UAAgC,KAAa,EAAE,eAAuB;QACpE,QAAQ,IAAI,CAAC,QAAQ,CAAC,oBAAoB;YACxC,KAAK,oBAAoB,CAAC,eAAe;gBACvC,OAAO,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,GAAG,KAAK,CAAC;YAC5E,KAAK,oBAAoB,CAAC,gBAAgB;gBACxC,OAAO,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,GAAG,eAAe,CAAC;YAC5E;gBACE,MAAM,IAAI,KAAK,CAAC,6CAA2C,IAAI,CAAC,QAAQ,CAAC,oBAAoB,OAAI,CAAC,CAAC;SACtG;KACF;IAEO,iCAAW,GAAnB,UAAoB,KAAa;QAC/B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;YAClB,QAAQ,EAAE,UAAU;YACpB,OAAO,EAAE,KAAK;SACf,CAAC,CAAC;KACJ;IAEO,mCAAa,GAArB,UAAsB,aAAqB,EAAE,gBAAwB;QAArE,iBA2BC;QA1BC,IAAM,GAAG,GAAG,aAAa,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;QAEjG,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACjC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;SAC9D;QAMD,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;QAErE,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAY;YAC5B,KAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;SACrC,CAAC,CAAC;QAEH,IAAI,GAAG,IAAI,gBAAgB,EAAE;YAC3B,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,MAAc;gBACjD,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;oBACxD,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC;wBACf,QAAQ,EAAE,qBAAqB;wBAC/B,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;qBACnC,CAAC,CAAC;iBACJ;aACF,CAAC,CAAC;SACJ;KACF;IAEO,+BAAS,GAAjB,UAAkB,GAAW,EAAE,KAAa;QAC1C,IAAI,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;YACnC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;gBAClB,QAAQ,EAAE,GAAG;gBACb,OAAO,EAAE,GAAG,KAAK,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,KAAK;aAChE,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;gBAClB,IAAI,EAAE,GAAG;gBACT,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAE9B,IAAI,GAAG,KAAK,aAAa,EAAE;YACzB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;gBAClB,QAAQ,EAAE,gBAAgB;gBAC1B,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;SACJ;aAAM,IAAI,GAAG,KAAK,QAAQ,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;gBAClB,QAAQ,EAAE,WAAW;gBACrB,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;SACJ;aAAM,IAAI,GAAG,KAAK,WAAW,EAAE;YAC9B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;gBAClB,QAAQ,EAAE,cAAc;gBACxB,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;SACJ;aAAM,IAAI,GAAG,KAAK,WAAW,EAAE;YAC9B,IAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC;YAErG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;YAC5C,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,GAAG,IAAI,CAAC;SACjD;aAAM,IAAI,GAAG,KAAK,qBAAqB,EAAE;YACxC,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAC;YAEvE,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACzC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;SACvC;KACF;;gBA/NF,UAAU;;;gBALF,UAAU;gBAHJ,KAAK;gBAAX,IAAI;;IAwOb,kBAAC;CAhOD;;;ICFE,mBAA6B,IAAiB;QAAjB,SAAI,GAAJ,IAAI,CAAa;KAAI;IAElD,+BAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACnE,IAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QAEtB,IAAM,YAAY,GAAG,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QAEhF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;QAEpC,OAAO,IAAI,CAAC;KACb;IAED,oCAAgB,GAAhB,UAAiB,KAA6B,EAAE,KAA0B;QACxE,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KACvC;;gBAhBF,UAAU;;;gBAFF,WAAW;;IAmBpB,gBAAC;CAjBD;;SCSgB,WAAW;IACzB,OAAO,IAAI,gBAAgB,EAAE,CAAC;CAC/B;AAED;IAcE,oBAAoC,YAAyB;QAC3D,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;SAC3E;KACF;IAhBM,kBAAO,GAAd,UACE,kBAGC;QAHD,mCAAA,EAAA;YACE,OAAO,EAAE,UAAU;YACnB,UAAU,EAAE,WAAW;SACxB;QAED,OAAO;YACL,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE,CAAC,kBAAkB,EAAE,SAAS,EAAE,WAAW,CAAC;SACxD,CAAC;KACH;;gBAZF,QAAQ;;;gBAc4C,UAAU,uBAAhD,QAAQ,YAAI,QAAQ;;IAKnC,iBAAC;CAnBD;;;;"}
